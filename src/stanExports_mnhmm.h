// Generated by rstantools.  Do not edit by hand.

/*
    seqHMM is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    seqHMM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with seqHMM.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_mnhmm_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 194> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 135, column 2 to column 41)",
  " (in 'string', line 137, column 2 to column 44)",
  " (in 'string', line 139, column 2 to column 44)",
  " (in 'string', line 140, column 2 to column 31)",
  " (in 'string', line 144, column 0 to column 15)",
  " (in 'string', line 155, column 2 to line 156, column 48)",
  " (in 'string', line 163, column 2 to column 35)",
  " (in 'string', line 147, column 4 to column 64)",
  " (in 'string', line 149, column 6 to column 69)",
  " (in 'string', line 150, column 6 to column 69)",
  " (in 'string', line 148, column 18 to line 151, column 5)",
  " (in 'string', line 148, column 4 to line 151, column 5)",
  " (in 'string', line 146, column 16 to line 152, column 3)",
  " (in 'string', line 146, column 2 to line 152, column 3)",
  " (in 'string', line 153, column 2 to column 58)",
  " (in 'string', line 145, column 19 to line 154, column 1)",
  " (in 'string', line 145, column 0 to line 154, column 1)",
  " (in 'string', line 165, column 4 to line 167, column 14)",
  " (in 'string', line 164, column 30 to line 168, column 3)",
  " (in 'string', line 164, column 2 to line 168, column 3)",
  " (in 'string', line 159, column 2 to column 18)",
  " (in 'string', line 160, column 2 to column 20)",
  " (in 'string', line 100, column 2 to column 17)",
  " (in 'string', line 101, column 2 to column 21)",
  " (in 'string', line 102, column 8 to column 9)",
  " (in 'string', line 102, column 2 to column 38)",
  " (in 'string', line 103, column 2 to column 17)",
  " (in 'string', line 104, column 2 to column 17)",
  " (in 'string', line 105, column 8 to column 13)",
  " (in 'string', line 105, column 15 to column 16)",
  " (in 'string', line 105, column 2 to column 48)",
  " (in 'string', line 106, column 2 to column 24)",
  " (in 'string', line 107, column 8 to column 16)",
  " (in 'string', line 107, column 2 to column 26)",
  " (in 'string', line 108, column 2 to column 19)",
  " (in 'string', line 109, column 8 to column 9)",
  " (in 'string', line 109, column 18 to column 21)",
  " (in 'string', line 109, column 2 to column 27)",
  " (in 'string', line 110, column 2 to column 19)",
  " (in 'string', line 111, column 8 to column 13)",
  " (in 'string', line 111, column 15 to column 16)",
  " (in 'string', line 111, column 25 to column 28)",
  " (in 'string', line 111, column 2 to column 34)",
  " (in 'string', line 112, column 2 to column 19)",
  " (in 'string', line 113, column 8 to column 13)",
  " (in 'string', line 113, column 15 to column 16)",
  " (in 'string', line 113, column 25 to column 28)",
  " (in 'string', line 113, column 2 to column 34)",
  " (in 'string', line 114, column 2 to column 32)",
  " (in 'string', line 115, column 2 to column 24)",
  " (in 'string', line 116, column 2 to column 17)",
  " (in 'string', line 117, column 2 to column 19)",
  " (in 'string', line 118, column 8 to column 9)",
  " (in 'string', line 118, column 18 to column 21)",
  " (in 'string', line 118, column 2 to column 27)",
  " (in 'string', line 121, column 2 to column 28)",
  " (in 'string', line 127, column 8 to column 30)",
  " (in 'string', line 128, column 8 to column 14)",
  " (in 'string', line 126, column 23 to line 129, column 7)",
  " (in 'string', line 126, column 6 to line 129, column 7)",
  " (in 'string', line 125, column 19 to line 130, column 5)",
  " (in 'string', line 125, column 4 to line 130, column 5)",
  " (in 'string', line 124, column 9 to line 131, column 3)",
  " (in 'string', line 123, column 4 to column 26)",
  " (in 'string', line 122, column 21 to line 124, column 3)",
  " (in 'string', line 122, column 2 to line 131, column 3)",
  " (in 'string', line 135, column 8 to column 9)",
  " (in 'string', line 135, column 18 to column 23)",
  " (in 'string', line 135, column 25 to column 28)",
  " (in 'string', line 137, column 8 to column 9)",
  " (in 'string', line 137, column 11 to column 12)",
  " (in 'string', line 137, column 21 to column 26)",
  " (in 'string', line 137, column 28 to column 31)",
  " (in 'string', line 139, column 8 to column 9)",
  " (in 'string', line 139, column 11 to column 12)",
  " (in 'string', line 139, column 21 to column 26)",
  " (in 'string', line 139, column 28 to column 31)",
  " (in 'string', line 140, column 9 to column 14)",
  " (in 'string', line 140, column 16 to column 19)",
  " (in 'string', line 8, column 4 to column 25)",
  " (in 'string', line 9, column 10 to column 16)",
  " (in 'string', line 9, column 4 to column 24)",
  " (in 'string', line 11, column 6 to column 25)",
  " (in 'string', line 10, column 23 to line 12, column 5)",
  " (in 'string', line 10, column 4 to line 12, column 5)",
  " (in 'string', line 13, column 4 to column 13)",
  " (in 'string', line 7, column 48 to line 14, column 3)",
  " (in 'string', line 16, column 4 to column 25)",
  " (in 'string', line 17, column 10 to column 16)",
  " (in 'string', line 17, column 4 to column 24)",
  " (in 'string', line 19, column 6 to column 22)",
  " (in 'string', line 18, column 23 to line 20, column 5)",
  " (in 'string', line 18, column 4 to line 20, column 5)",
  " (in 'string', line 21, column 4 to column 13)",
  " (in 'string', line 15, column 40 to line 22, column 3)",
  " (in 'string', line 24, column 4 to column 25)",
  " (in 'string', line 25, column 10 to column 16)",
  " (in 'string', line 25, column 4 to column 24)",
  " (in 'string', line 27, column 6 to column 22)",
  " (in 'string', line 26, column 23 to line 28, column 5)",
  " (in 'string', line 26, column 4 to line 28, column 5)",
  " (in 'string', line 29, column 4 to column 13)",
  " (in 'string', line 23, column 40 to line 30, column 3)",
  " (in 'string', line 35, column 2 to column 27)",
  " (in 'string', line 36, column 2 to column 34)",
  " (in 'string', line 37, column 2 to column 20)",
  " (in 'string', line 38, column 2 to column 33)",
  " (in 'string', line 39, column 2 to column 36)",
  " (in 'string', line 40, column 2 to column 36)",
  " (in 'string', line 41, column 2 to column 33)",
  " (in 'string', line 42, column 13 to column 16)",
  " (in 'string', line 42, column 2 to column 57)",
  " (in 'string', line 43, column 13 to column 16)",
  " (in 'string', line 43, column 2 to column 57)",
  " (in 'string', line 44, column 13 to column 16)",
  " (in 'string', line 44, column 2 to column 57)",
  " (in 'string', line 45, column 13 to column 16)",
  " (in 'string', line 45, column 2 to column 57)",
  " (in 'string', line 46, column 9 to column 10)",
  " (in 'string', line 46, column 2 to column 39)",
  " (in 'string', line 47, column 9 to column 17)",
  " (in 'string', line 47, column 19 to column 20)",
  " (in 'string', line 47, column 2 to column 25)",
  " (in 'string', line 48, column 9 to column 10)",
  " (in 'string', line 48, column 2 to column 19)",
  " (in 'string', line 49, column 9 to column 10)",
  " (in 'string', line 49, column 12 to column 13)",
  " (in 'string', line 49, column 2 to column 21)",
  " (in 'string', line 50, column 9 to column 10)",
  " (in 'string', line 50, column 12 to column 17)",
  " (in 'string', line 50, column 2 to column 25)",
  " (in 'string', line 51, column 9 to column 10)",
  " (in 'string', line 51, column 2 to column 19)",
  " (in 'string', line 52, column 9 to column 10)",
  " (in 'string', line 52, column 2 to column 22)",
  " (in 'string', line 53, column 9 to column 10)",
  " (in 'string', line 53, column 2 to column 26)",
  " (in 'string', line 54, column 9 to column 10)",
  " (in 'string', line 54, column 12 to column 15)",
  " (in 'string', line 54, column 2 to column 24)",
  " (in 'string', line 55, column 8 to column 9)",
  " (in 'string', line 55, column 18 to column 19)",
  " (in 'string', line 55, column 21 to column 24)",
  " (in 'string', line 55, column 2 to column 33)",
  " (in 'string', line 56, column 8 to column 9)",
  " (in 'string', line 56, column 18 to column 19)",
  " (in 'string', line 56, column 21 to column 24)",
  " (in 'string', line 56, column 2 to column 33)",
  " (in 'string', line 57, column 9 to column 10)",
  " (in 'string', line 57, column 12 to column 15)",
  " (in 'string', line 57, column 2 to column 62)",
  " (in 'string', line 59, column 4 to column 54)",
  " (in 'string', line 61, column 6 to column 62)",
  " (in 'string', line 62, column 6 to column 62)",
  " (in 'string', line 60, column 18 to line 63, column 5)",
  " (in 'string', line 60, column 4 to line 63, column 5)",
  " (in 'string', line 65, column 6 to column 22)",
  " (in 'string', line 66, column 6 to column 44)",
  " (in 'string', line 68, column 8 to column 60)",
  " (in 'string', line 69, column 8 to column 28)",
  " (in 'string', line 67, column 20 to line 70, column 7)",
  " (in 'string', line 67, column 6 to line 70, column 7)",
  " (in 'string', line 71, column 6 to column 34)",
  " (in 'string', line 72, column 6 to column 34)",
  " (in 'string', line 75, column 10 to column 62)",
  " (in 'string', line 76, column 10 to column 30)",
  " (in 'string', line 74, column 22 to line 77, column 9)",
  " (in 'string', line 74, column 8 to line 77, column 9)",
  " (in 'string', line 78, column 8 to column 36)",
  " (in 'string', line 80, column 10 to column 63)",
  " (in 'string', line 79, column 22 to line 81, column 9)",
  " (in 'string', line 79, column 8 to line 81, column 9)",
  " (in 'string', line 83, column 10 to column 77)",
  " (in 'string', line 82, column 23 to line 84, column 9)",
  " (in 'string', line 82, column 8 to line 84, column 9)",
  " (in 'string', line 85, column 8 to column 34)",
  " (in 'string', line 73, column 24 to line 86, column 7)",
  " (in 'string', line 73, column 6 to line 86, column 7)",
  " (in 'string', line 87, column 6 to column 41)",
  " (in 'string', line 64, column 26 to line 88, column 5)",
  " (in 'string', line 64, column 4 to line 88, column 5)",
  " (in 'string', line 58, column 16 to line 89, column 3)",
  " (in 'string', line 58, column 2 to line 89, column 3)",
  " (in 'string', line 90, column 9 to column 17)",
  " (in 'string', line 90, column 2 to column 24)",
  " (in 'string', line 92, column 4 to column 20)",
  " (in 'string', line 93, column 11 to column 12)",
  " (in 'string', line 93, column 4 to column 54)",
  " (in 'string', line 94, column 4 to column 50)",
  " (in 'string', line 91, column 24 to line 95, column 3)",
  " (in 'string', line 91, column 2 to line 95, column 3)",
  " (in 'string', line 96, column 2 to column 19)",
  " (in 'string', line 34, column 61 to line 97, column 1)"};
std::vector<int>
add(const std::vector<int>& x, const std::vector<int>& y, std::ostream*
    pstream__);
std::vector<int>
add(const int& x, const std::vector<int>& y, std::ostream* pstream__);
std::vector<int>
add(const std::vector<int>& x, const int& y, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T9__, typename T10__, typename T11__, typename T12__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, stan::base_type_t<T3__>, T9__,
  stan::promote_args_t<T10__, T11__, T12__>>
loglik_sc_mix(const std::vector<Eigen::Matrix<T0__,-1,-1>>& beta_i_raw,
              const std::vector<std::vector<Eigen::Matrix<T1__,-1,-1>>>&
              beta_s_raw,
              const std::vector<std::vector<Eigen::Matrix<T2__,-1,-1>>>&
              beta_o_raw, const T3__& theta_raw_arg__,
              const std::vector<std::vector<int>>& obs, const int& M,
              const std::vector<int>& T, const int& N_sample,
              const std::vector<int>& ids,
              const std::vector<std::vector<Eigen::Matrix<T9__,-1,1>>>& X_s,
              const std::vector<std::vector<Eigen::Matrix<T10__,-1,1>>>& X_o,
              const std::vector<Eigen::Matrix<T11__,-1,1>>& X_i,
              const std::vector<Eigen::Matrix<T12__,-1,1>>& X_d,
              std::ostream* pstream__);
std::vector<int>
add(const std::vector<int>& x, const std::vector<int>& y, std::ostream*
    pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int x_size = std::numeric_limits<int>::min();
    current_statement__ = 80;
    x_size = stan::math::size(x);
    current_statement__ = 81;
    stan::math::validate_non_negative_index("z", "x_size", x_size);
    std::vector<int> z =
      std::vector<int>(x_size, std::numeric_limits<int>::min());
    current_statement__ = 85;
    for (int i = 1; i <= x_size; ++i) {
      current_statement__ = 83;
      stan::model::assign(z,
        (stan::model::rvalue(x, "x", stan::model::index_uni(i)) +
        stan::model::rvalue(y, "y", stan::model::index_uni(i))),
        "assigning variable z", stan::model::index_uni(i));
    }
    current_statement__ = 86;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<int>
add(const int& x, const std::vector<int>& y, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int y_size = std::numeric_limits<int>::min();
    current_statement__ = 88;
    y_size = stan::math::size(y);
    current_statement__ = 89;
    stan::math::validate_non_negative_index("z", "y_size", y_size);
    std::vector<int> z =
      std::vector<int>(y_size, std::numeric_limits<int>::min());
    current_statement__ = 93;
    for (int i = 1; i <= y_size; ++i) {
      current_statement__ = 91;
      stan::model::assign(z, (x +
        stan::model::rvalue(y, "y", stan::model::index_uni(i))),
        "assigning variable z", stan::model::index_uni(i));
    }
    current_statement__ = 94;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<int>
add(const std::vector<int>& x, const int& y, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int x_size = std::numeric_limits<int>::min();
    current_statement__ = 96;
    x_size = stan::math::size(x);
    current_statement__ = 97;
    stan::math::validate_non_negative_index("z", "x_size", x_size);
    std::vector<int> z =
      std::vector<int>(x_size, std::numeric_limits<int>::min());
    current_statement__ = 101;
    for (int i = 1; i <= x_size; ++i) {
      current_statement__ = 99;
      stan::model::assign(z,
        (stan::model::rvalue(x, "x", stan::model::index_uni(i)) + y),
        "assigning variable z", stan::model::index_uni(i));
    }
    current_statement__ = 102;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T9__, typename T10__, typename T11__, typename T12__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>>*>
stan::promote_args_t<T0__, T1__, T2__, stan::base_type_t<T3__>, T9__,
  stan::promote_args_t<T10__, T11__, T12__>>
loglik_sc_mix(const std::vector<Eigen::Matrix<T0__,-1,-1>>& beta_i_raw,
              const std::vector<std::vector<Eigen::Matrix<T1__,-1,-1>>>&
              beta_s_raw,
              const std::vector<std::vector<Eigen::Matrix<T2__,-1,-1>>>&
              beta_o_raw, const T3__& theta_raw_arg__,
              const std::vector<std::vector<int>>& obs, const int& M,
              const std::vector<int>& T, const int& N_sample,
              const std::vector<int>& ids,
              const std::vector<std::vector<Eigen::Matrix<T9__,-1,1>>>& X_s,
              const std::vector<std::vector<Eigen::Matrix<T10__,-1,1>>>& X_o,
              const std::vector<Eigen::Matrix<T11__,-1,1>>& X_i,
              const std::vector<Eigen::Matrix<T12__,-1,1>>& X_d,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__,
                             stan::base_type_t<T3__>, T9__,
                             stan::promote_args_t<T10__, T11__, T12__>>;
  int current_statement__ = 0;
  const auto& theta_raw = stan::math::to_ref(theta_raw_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int D = std::numeric_limits<int>::min();
    current_statement__ = 104;
    D = stan::math::size(beta_i_raw);
    int S = std::numeric_limits<int>::min();
    current_statement__ = 105;
    S = (stan::math::rows(
           stan::model::rvalue(beta_i_raw, "beta_i_raw",
             stan::model::index_uni(1)))
      + 1);
    int N = std::numeric_limits<int>::min();
    current_statement__ = 106;
    N = stan::math::size(X_i);
    int K_i = std::numeric_limits<int>::min();
    current_statement__ = 107;
    K_i = stan::math::num_elements(
            stan::model::rvalue(X_i, "X_i", stan::model::index_uni(1)));
    int K_s = std::numeric_limits<int>::min();
    current_statement__ = 108;
    K_s = stan::math::num_elements(
            stan::model::rvalue(X_s, "X_s", stan::model::index_uni(1),
              stan::model::index_uni(1)));
    int K_o = std::numeric_limits<int>::min();
    current_statement__ = 109;
    K_o = stan::math::num_elements(
            stan::model::rvalue(X_o, "X_o", stan::model::index_uni(1),
              stan::model::index_uni(1)));
    int K_d = std::numeric_limits<int>::min();
    current_statement__ = 110;
    K_d = stan::math::num_elements(
            stan::model::rvalue(X_d, "X_d", stan::model::index_uni(1)));
    current_statement__ = 111;
    stan::math::validate_non_negative_index("zeros_row_K_i", "K_i", K_i);
    Eigen::Matrix<local_scalar_t__,1,-1> zeros_row_K_i =
      Eigen::Matrix<local_scalar_t__,1,-1>::Constant(K_i, DUMMY_VAR__);
    current_statement__ = 112;
    stan::model::assign(zeros_row_K_i, stan::math::rep_row_vector(0, K_i),
      "assigning variable zeros_row_K_i");
    current_statement__ = 113;
    stan::math::validate_non_negative_index("zeros_row_K_s", "K_s", K_s);
    Eigen::Matrix<local_scalar_t__,1,-1> zeros_row_K_s =
      Eigen::Matrix<local_scalar_t__,1,-1>::Constant(K_s, DUMMY_VAR__);
    current_statement__ = 114;
    stan::model::assign(zeros_row_K_s, stan::math::rep_row_vector(0, K_s),
      "assigning variable zeros_row_K_s");
    current_statement__ = 115;
    stan::math::validate_non_negative_index("zeros_row_K_o", "K_o", K_o);
    Eigen::Matrix<local_scalar_t__,1,-1> zeros_row_K_o =
      Eigen::Matrix<local_scalar_t__,1,-1>::Constant(K_o, DUMMY_VAR__);
    current_statement__ = 116;
    stan::model::assign(zeros_row_K_o, stan::math::rep_row_vector(0, K_o),
      "assigning variable zeros_row_K_o");
    current_statement__ = 117;
    stan::math::validate_non_negative_index("zeros_row_K_d", "K_d", K_d);
    Eigen::Matrix<local_scalar_t__,1,-1> zeros_row_K_d =
      Eigen::Matrix<local_scalar_t__,1,-1>::Constant(K_d, DUMMY_VAR__);
    current_statement__ = 118;
    stan::model::assign(zeros_row_K_d, stan::math::rep_row_vector(0, K_d),
      "assigning variable zeros_row_K_d");
    current_statement__ = 119;
    stan::math::validate_non_negative_index("zeros_S", "S", S);
    Eigen::Matrix<local_scalar_t__,-1,1> zeros_S =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
    current_statement__ = 120;
    stan::model::assign(zeros_S, stan::math::rep_vector(0, S),
      "assigning variable zeros_S");
    current_statement__ = 121;
    stan::math::validate_non_negative_index("ll", "N_sample", N_sample);
    current_statement__ = 122;
    stan::math::validate_non_negative_index("ll", "D", D);
    Eigen::Matrix<local_scalar_t__,-1,-1> ll =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_sample, D,
        DUMMY_VAR__);
    current_statement__ = 124;
    stan::math::validate_non_negative_index("log_Pi", "S", S);
    Eigen::Matrix<local_scalar_t__,-1,1> log_Pi =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
    current_statement__ = 126;
    stan::math::validate_non_negative_index("log_A", "S", S);
    current_statement__ = 127;
    stan::math::validate_non_negative_index("log_A", "S", S);
    Eigen::Matrix<local_scalar_t__,-1,-1> log_A =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(S, S, DUMMY_VAR__);
    current_statement__ = 129;
    stan::math::validate_non_negative_index("log_B", "S", S);
    current_statement__ = 130;
    stan::math::validate_non_negative_index("log_B", "M + 1", (M + 1));
    Eigen::Matrix<local_scalar_t__,-1,-1> log_B =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(S, (M + 1),
        DUMMY_VAR__);
    current_statement__ = 132;
    stan::math::validate_non_negative_index("log_py", "S", S);
    Eigen::Matrix<local_scalar_t__,-1,1> log_py =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
    current_statement__ = 134;
    stan::math::validate_non_negative_index("log_alpha", "S", S);
    Eigen::Matrix<local_scalar_t__,-1,1> log_alpha =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
    current_statement__ = 136;
    stan::math::validate_non_negative_index("log_alpha_new", "S", S);
    Eigen::Matrix<local_scalar_t__,-1,1> log_alpha_new =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
    current_statement__ = 138;
    stan::math::validate_non_negative_index("beta_i", "S", S);
    current_statement__ = 139;
    stan::math::validate_non_negative_index("beta_i", "K_i", K_i);
    Eigen::Matrix<local_scalar_t__,-1,-1> beta_i =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(S, K_i, DUMMY_VAR__);
    current_statement__ = 141;
    stan::math::validate_non_negative_index("beta_s", "S", S);
    current_statement__ = 142;
    stan::math::validate_non_negative_index("beta_s", "S", S);
    current_statement__ = 143;
    stan::math::validate_non_negative_index("beta_s", "K_s", K_s);
    std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> beta_s =
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(S, K_s, DUMMY_VAR__));
    current_statement__ = 145;
    stan::math::validate_non_negative_index("beta_o", "S", S);
    current_statement__ = 146;
    stan::math::validate_non_negative_index("beta_o", "M", M);
    current_statement__ = 147;
    stan::math::validate_non_negative_index("beta_o", "K_o", K_o);
    std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> beta_o =
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(M, K_o, DUMMY_VAR__));
    current_statement__ = 149;
    stan::math::validate_non_negative_index("theta", "D", D);
    current_statement__ = 150;
    stan::math::validate_non_negative_index("theta", "K_d", K_d);
    Eigen::Matrix<local_scalar_t__,-1,-1> theta =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(D, K_d, DUMMY_VAR__);
    current_statement__ = 151;
    stan::model::assign(theta,
      stan::math::append_row(zeros_row_K_d, theta_raw),
      "assigning variable theta");
    current_statement__ = 183;
    for (int d = 1; d <= D; ++d) {
      current_statement__ = 152;
      stan::model::assign(beta_i,
        stan::math::append_row(zeros_row_K_i,
          stan::model::rvalue(beta_i_raw, "beta_i_raw",
            stan::model::index_uni(d))), "assigning variable beta_i");
      current_statement__ = 156;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 153;
        stan::model::assign(beta_s,
          stan::math::append_row(zeros_row_K_s,
            stan::model::rvalue(beta_s_raw, "beta_s_raw",
              stan::model::index_uni(d), stan::model::index_uni(s))),
          "assigning variable beta_s", stan::model::index_uni(s));
        current_statement__ = 154;
        stan::model::assign(beta_o,
          stan::math::append_row(zeros_row_K_o,
            stan::model::rvalue(beta_o_raw, "beta_o_raw",
              stan::model::index_uni(d), stan::model::index_uni(s))),
          "assigning variable beta_o", stan::model::index_uni(s));
      }
      current_statement__ = 181;
      for (int ii = 1; ii <= N_sample; ++ii) {
        int i = std::numeric_limits<int>::min();
        current_statement__ = 157;
        i = stan::model::rvalue(ids, "ids", stan::model::index_uni(ii));
        current_statement__ = 158;
        stan::model::assign(log_Pi,
          stan::math::log_softmax(
            stan::math::multiply(beta_i,
              stan::model::rvalue(X_i, "X_i", stan::model::index_uni(i)))),
          "assigning variable log_Pi");
        current_statement__ = 162;
        for (int s = 1; s <= S; ++s) {
          current_statement__ = 159;
          stan::model::assign(log_B,
            stan::math::transpose(
              stan::math::log_softmax(
                stan::math::multiply(
                  stan::model::rvalue(beta_o, "beta_o",
                    stan::model::index_uni(s)),
                  stan::model::rvalue(X_o, "X_o", stan::model::index_uni(1),
                    stan::model::index_uni(i))))),
            "assigning variable log_B", stan::model::index_uni(s),
            stan::model::index_min_max(1, M));
          current_statement__ = 160;
          stan::model::assign(log_B, 0, "assigning variable log_B",
            stan::model::index_uni(s), stan::model::index_uni((M + 1)));
        }
        current_statement__ = 163;
        stan::model::assign(log_py,
          stan::model::rvalue(log_B, "log_B", stan::model::index_omni(),
            stan::model::index_uni(
              stan::model::rvalue(obs, "obs", stan::model::index_uni(1),
                stan::model::index_uni(i)))), "assigning variable log_py");
        current_statement__ = 164;
        stan::model::assign(log_alpha, stan::math::add(log_Pi, log_py),
          "assigning variable log_alpha");
        current_statement__ = 178;
        for (int t = 2; t <=
             stan::model::rvalue(T, "T", stan::model::index_uni(i)); ++t) {
          current_statement__ = 168;
          for (int s = 1; s <= S; ++s) {
            current_statement__ = 165;
            stan::model::assign(log_B,
              stan::math::transpose(
                stan::math::log_softmax(
                  stan::math::multiply(
                    stan::model::rvalue(beta_o, "beta_o",
                      stan::model::index_uni(s)),
                    stan::model::rvalue(X_o, "X_o",
                      stan::model::index_uni(t), stan::model::index_uni(i))))),
              "assigning variable log_B", stan::model::index_uni(s),
              stan::model::index_min_max(1, M));
            current_statement__ = 166;
            stan::model::assign(log_B, 0, "assigning variable log_B",
              stan::model::index_uni(s), stan::model::index_uni((M + 1)));
          }
          current_statement__ = 169;
          stan::model::assign(log_py,
            stan::model::rvalue(log_B, "log_B", stan::model::index_omni(),
              stan::model::index_uni(
                stan::model::rvalue(obs, "obs", stan::model::index_uni(t),
                  stan::model::index_uni(i)))), "assigning variable log_py");
          current_statement__ = 172;
          for (int s = 1; s <= S; ++s) {
            current_statement__ = 170;
            stan::model::assign(log_A,
              stan::math::transpose(
                stan::math::log_softmax(
                  stan::math::multiply(
                    stan::model::rvalue(beta_s, "beta_s",
                      stan::model::index_uni(s)),
                    stan::model::rvalue(X_s, "X_s",
                      stan::model::index_uni((t - 1)),
                      stan::model::index_uni(i))))),
              "assigning variable log_A", stan::model::index_uni(s),
              stan::model::index_omni());
          }
          current_statement__ = 175;
          for (int k = 1; k <= S; ++k) {
            current_statement__ = 173;
            stan::model::assign(log_alpha_new,
              stan::math::log_sum_exp(
                stan::math::add(
                  stan::math::add(log_alpha,
                    stan::model::rvalue(log_A, "log_A",
                      stan::model::index_omni(), stan::model::index_uni(k))),
                  stan::model::rvalue(log_py, "log_py",
                    stan::model::index_uni(k)))),
              "assigning variable log_alpha_new", stan::model::index_uni(k));
          }
          current_statement__ = 176;
          stan::model::assign(log_alpha, log_alpha_new,
            "assigning variable log_alpha");
        }
        current_statement__ = 179;
        stan::model::assign(ll, stan::math::log_sum_exp(log_alpha),
          "assigning variable ll", stan::model::index_uni(ii),
          stan::model::index_uni(d));
      }
    }
    current_statement__ = 184;
    stan::math::validate_non_negative_index("ll_i", "N_sample", N_sample);
    Eigen::Matrix<local_scalar_t__,-1,1> ll_i =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_sample, DUMMY_VAR__);
    current_statement__ = 191;
    for (int ii = 1; ii <= N_sample; ++ii) {
      int i = std::numeric_limits<int>::min();
      current_statement__ = 186;
      i = stan::model::rvalue(ids, "ids", stan::model::index_uni(ii));
      current_statement__ = 187;
      stan::math::validate_non_negative_index("log_omega", "D", D);
      Eigen::Matrix<local_scalar_t__,-1,1> log_omega =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(D, DUMMY_VAR__);
      current_statement__ = 188;
      stan::model::assign(log_omega,
        stan::math::log_softmax(
          stan::math::multiply(theta,
            stan::model::rvalue(X_d, "X_d", stan::model::index_uni(i)))),
        "assigning variable log_omega");
      current_statement__ = 189;
      stan::model::assign(ll_i,
        stan::math::log_sum_exp(
          stan::math::add(log_omega,
            stan::math::transpose(
              stan::model::rvalue(ll, "ll", stan::model::index_uni(ii),
                stan::model::index_omni())))), "assigning variable ll_i",
        stan::model::index_uni(ii));
    }
    current_statement__ = 192;
    return stan::math::sum(ll_i);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_mnhmm final : public model_base_crtp<model_mnhmm> {
private:
  int N;
  int max_T;
  std::vector<int> T;
  int M;
  int S;
  std::vector<std::vector<int>> obs;
  int N_sample;
  std::vector<int> ids;
  int K_i;
  std::vector<Eigen::Matrix<double,-1,1>> X_i;
  int K_s;
  std::vector<std::vector<Eigen::Matrix<double,-1,1>>> X_s;
  int K_o;
  std::vector<std::vector<Eigen::Matrix<double,-1,1>>> X_o;
  int penalize;
  double penalty;
  int D;
  int K_d;
  std::vector<Eigen::Matrix<double,-1,1>> X_d;
  int compute_ploglik_N;
  int beta_i_raw_2dim__;
  int beta_s_raw_3dim__;
  int beta_o_raw_3dim__;
  int theta_raw_1dim__;
public:
  ~model_mnhmm() {}
  model_mnhmm(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_mnhmm_namespace::model_mnhmm";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 23;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 23;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 24;
      context__.validate_dims("data initialization", "max_T", "int",
        std::vector<size_t>{});
      max_T = std::numeric_limits<int>::min();
      current_statement__ = 24;
      max_T = context__.vals_i("max_T")[(1 - 1)];
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "max_T", max_T, 2);
      current_statement__ = 25;
      stan::math::validate_non_negative_index("T", "N", N);
      current_statement__ = 26;
      context__.validate_dims("data initialization", "T", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      T = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 26;
      T = context__.vals_i("T");
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "T", T, 2);
      current_statement__ = 26;
      stan::math::check_less_or_equal(function__, "T", T, max_T);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 27;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "M", M, 2);
      current_statement__ = 28;
      context__.validate_dims("data initialization", "S", "int",
        std::vector<size_t>{});
      S = std::numeric_limits<int>::min();
      current_statement__ = 28;
      S = context__.vals_i("S")[(1 - 1)];
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "S", S, 1);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("obs", "max_T", max_T);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("obs", "N", N);
      current_statement__ = 31;
      context__.validate_dims("data initialization", "obs", "int",
        std::vector<size_t>{static_cast<size_t>(max_T),
          static_cast<size_t>(N)});
      obs = std::vector<std::vector<int>>(max_T,
              std::vector<int>(N, std::numeric_limits<int>::min()));
      {
        std::vector<int> obs_flat__;
        current_statement__ = 31;
        obs_flat__ = context__.vals_i("obs");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 31;
          for (int sym2__ = 1; sym2__ <= max_T; ++sym2__) {
            current_statement__ = 31;
            stan::model::assign(obs, obs_flat__[(pos__ - 1)],
              "assigning variable obs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 31;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "obs", obs, 0);
      current_statement__ = 31;
      stan::math::check_less_or_equal(function__, "obs", obs, (M + 1));
      current_statement__ = 32;
      context__.validate_dims("data initialization", "N_sample", "int",
        std::vector<size_t>{});
      N_sample = std::numeric_limits<int>::min();
      current_statement__ = 32;
      N_sample = context__.vals_i("N_sample")[(1 - 1)];
      current_statement__ = 32;
      stan::math::check_less_or_equal(function__, "N_sample", N_sample, N);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("ids", "N_sample", N_sample);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "ids", "int",
        std::vector<size_t>{static_cast<size_t>(N_sample)});
      ids = std::vector<int>(N_sample, std::numeric_limits<int>::min());
      current_statement__ = 34;
      ids = context__.vals_i("ids");
      current_statement__ = 35;
      context__.validate_dims("data initialization", "K_i", "int",
        std::vector<size_t>{});
      K_i = std::numeric_limits<int>::min();
      current_statement__ = 35;
      K_i = context__.vals_i("K_i")[(1 - 1)];
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "K_i", K_i, 1);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("X_i", "N", N);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("X_i", "K_i", K_i);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "X_i", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(K_i)});
      X_i = std::vector<Eigen::Matrix<double,-1,1>>(N,
              Eigen::Matrix<double,-1,1>::Constant(K_i,
                std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> X_i_flat__;
        current_statement__ = 38;
        X_i_flat__ = context__.vals_r("X_i");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= K_i; ++sym1__) {
          current_statement__ = 38;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 38;
            stan::model::assign(X_i, X_i_flat__[(pos__ - 1)],
              "assigning variable X_i", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 38;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 39;
      context__.validate_dims("data initialization", "K_s", "int",
        std::vector<size_t>{});
      K_s = std::numeric_limits<int>::min();
      current_statement__ = 39;
      K_s = context__.vals_i("K_s")[(1 - 1)];
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "K_s", K_s, 1);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("X_s", "max_T", max_T);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("X_s", "N", N);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("X_s", "K_s", K_s);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "X_s", "double",
        std::vector<size_t>{static_cast<size_t>(max_T),
          static_cast<size_t>(N), static_cast<size_t>(K_s)});
      X_s = std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(max_T,
              std::vector<Eigen::Matrix<double,-1,1>>(N,
                Eigen::Matrix<double,-1,1>::Constant(K_s,
                  std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> X_s_flat__;
        current_statement__ = 43;
        X_s_flat__ = context__.vals_r("X_s");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
          current_statement__ = 43;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 43;
            for (int sym3__ = 1; sym3__ <= max_T; ++sym3__) {
              current_statement__ = 43;
              stan::model::assign(X_s, X_s_flat__[(pos__ - 1)],
                "assigning variable X_s", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 43;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 44;
      context__.validate_dims("data initialization", "K_o", "int",
        std::vector<size_t>{});
      K_o = std::numeric_limits<int>::min();
      current_statement__ = 44;
      K_o = context__.vals_i("K_o")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "K_o", K_o, 1);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("X_o", "max_T", max_T);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("X_o", "N", N);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("X_o", "K_o", K_o);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "X_o", "double",
        std::vector<size_t>{static_cast<size_t>(max_T),
          static_cast<size_t>(N), static_cast<size_t>(K_o)});
      X_o = std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(max_T,
              std::vector<Eigen::Matrix<double,-1,1>>(N,
                Eigen::Matrix<double,-1,1>::Constant(K_o,
                  std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> X_o_flat__;
        current_statement__ = 48;
        X_o_flat__ = context__.vals_r("X_o");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
          current_statement__ = 48;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 48;
            for (int sym3__ = 1; sym3__ <= max_T; ++sym3__) {
              current_statement__ = 48;
              stan::model::assign(X_o, X_o_flat__[(pos__ - 1)],
                "assigning variable X_o", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 48;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 49;
      context__.validate_dims("data initialization", "penalize", "int",
        std::vector<size_t>{});
      penalize = std::numeric_limits<int>::min();
      current_statement__ = 49;
      penalize = context__.vals_i("penalize")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "penalize", penalize, 0);
      current_statement__ = 49;
      stan::math::check_less_or_equal(function__, "penalize", penalize, 1);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "penalty", "double",
        std::vector<size_t>{});
      penalty = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 50;
      penalty = context__.vals_r("penalty")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "penalty", penalty, 0);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "D", "int",
        std::vector<size_t>{});
      D = std::numeric_limits<int>::min();
      current_statement__ = 51;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "D", D, 2);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "K_d", "int",
        std::vector<size_t>{});
      K_d = std::numeric_limits<int>::min();
      current_statement__ = 52;
      K_d = context__.vals_i("K_d")[(1 - 1)];
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "K_d", K_d, 1);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("X_d", "N", N);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("X_d", "K_d", K_d);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "X_d", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(K_d)});
      X_d = std::vector<Eigen::Matrix<double,-1,1>>(N,
              Eigen::Matrix<double,-1,1>::Constant(K_d,
                std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> X_d_flat__;
        current_statement__ = 55;
        X_d_flat__ = context__.vals_r("X_d");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= K_d; ++sym1__) {
          current_statement__ = 55;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 55;
            stan::model::assign(X_d, X_d_flat__[(pos__ - 1)],
              "assigning variable X_d", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 55;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 56;
      compute_ploglik_N = std::numeric_limits<int>::min();
      current_statement__ = 56;
      compute_ploglik_N = 0;
      current_statement__ = 66;
      if (stan::math::logical_neq(N, N_sample)) {
        current_statement__ = 64;
        compute_ploglik_N = 1;
      } else {
        current_statement__ = 62;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 60;
          if (stan::math::logical_neq(
                stan::model::rvalue(ids, "ids", stan::model::index_uni(i)), i)) {
            current_statement__ = 57;
            compute_ploglik_N = 1;
            break;
          }
        }
      }
      current_statement__ = 67;
      stan::math::validate_non_negative_index("beta_i_raw", "D", D);
      current_statement__ = 68;
      beta_i_raw_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 68;
      beta_i_raw_2dim__ = (S - 1);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("beta_i_raw", "S - 1",
        beta_i_raw_2dim__);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("beta_i_raw", "K_i", K_i);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("beta_s_raw", "D", D);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("beta_s_raw", "S", S);
      current_statement__ = 72;
      beta_s_raw_3dim__ = std::numeric_limits<int>::min();
      current_statement__ = 72;
      beta_s_raw_3dim__ = (S - 1);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("beta_s_raw", "S - 1",
        beta_s_raw_3dim__);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("beta_s_raw", "K_s", K_s);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("beta_o_raw", "D", D);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("beta_o_raw", "S", S);
      current_statement__ = 76;
      beta_o_raw_3dim__ = std::numeric_limits<int>::min();
      current_statement__ = 76;
      beta_o_raw_3dim__ = (M - 1);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("beta_o_raw", "M - 1",
        beta_o_raw_3dim__);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("beta_o_raw", "K_o", K_o);
      current_statement__ = 78;
      theta_raw_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 78;
      theta_raw_1dim__ = (D - 1);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("theta_raw", "D - 1",
        theta_raw_1dim__);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("theta_raw", "K_d", K_d);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (D * beta_i_raw_2dim__ * K_i) + (D * S *
      beta_s_raw_3dim__ * K_s) + (D * S * beta_o_raw_3dim__ * K_o) +
      (theta_raw_1dim__ * K_d);
  }
  inline std::string model_name() const final {
    return "model_mnhmm";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_mnhmm_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> beta_i_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(D,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_i_raw_2dim__,
            K_i, DUMMY_VAR__));
      current_statement__ = 1;
      beta_i_raw = in__.template read<
                     std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(D,
                     beta_i_raw_2dim__, K_i);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>
        beta_s_raw =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(D,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_s_raw_3dim__,
              K_s, DUMMY_VAR__)));
      current_statement__ = 2;
      beta_s_raw = in__.template read<
                     std::vector<
                       std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>>(D,
                     S, beta_s_raw_3dim__, K_s);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>
        beta_o_raw =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(D,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_o_raw_3dim__,
              K_o, DUMMY_VAR__)));
      current_statement__ = 3;
      beta_o_raw = in__.template read<
                     std::vector<
                       std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>>(D,
                     S, beta_o_raw_3dim__, K_o);
      Eigen::Matrix<local_scalar_t__,-1,-1> theta_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(theta_raw_1dim__,
          K_d, DUMMY_VAR__);
      current_statement__ = 4;
      theta_raw = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,-1>>(theta_raw_1dim__,
                    K_d);
      local_scalar_t__ prior = DUMMY_VAR__;
      current_statement__ = 5;
      prior = 0;
      current_statement__ = 17;
      if (stan::math::logical_eq(penalize, 1)) {
        current_statement__ = 14;
        for (int d = 1; d <= D; ++d) {
          current_statement__ = 8;
          prior = (prior +
            stan::math::normal_lpdf<false>(
              stan::math::to_vector(
                stan::model::rvalue(beta_i_raw, "beta_i_raw",
                  stan::model::index_uni(d))), 0, penalty));
          current_statement__ = 12;
          for (int s = 1; s <= S; ++s) {
            current_statement__ = 9;
            prior = (prior +
              stan::math::normal_lpdf<false>(
                stan::math::to_vector(
                  stan::model::rvalue(beta_s_raw, "beta_s_raw",
                    stan::model::index_uni(d), stan::model::index_uni(s))),
                0, penalty));
            current_statement__ = 10;
            prior = (prior +
              stan::math::normal_lpdf<false>(
                stan::math::to_vector(
                  stan::model::rvalue(beta_o_raw, "beta_o_raw",
                    stan::model::index_uni(d), stan::model::index_uni(s))),
                0, penalty));
          }
        }
        current_statement__ = 15;
        prior = (prior +
          stan::math::normal_lpdf<false>(stan::math::to_vector(theta_raw), 0,
            penalty));
      }
      local_scalar_t__ log_lik = DUMMY_VAR__;
      current_statement__ = 6;
      log_lik = loglik_sc_mix(beta_i_raw, beta_s_raw, beta_o_raw, theta_raw,
                  obs, M, T, N_sample, ids, X_s, X_o, X_i, X_d, pstream__);
      {
        current_statement__ = 21;
        lp_accum__.add(prior);
        current_statement__ = 22;
        lp_accum__.add(log_lik);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_mnhmm_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<double,-1,-1>> beta_i_raw =
        std::vector<Eigen::Matrix<double,-1,-1>>(D,
          Eigen::Matrix<double,-1,-1>::Constant(beta_i_raw_2dim__, K_i,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      beta_i_raw = in__.template read<
                     std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(D,
                     beta_i_raw_2dim__, K_i);
      std::vector<std::vector<Eigen::Matrix<double,-1,-1>>> beta_s_raw =
        std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>(D,
          std::vector<Eigen::Matrix<double,-1,-1>>(S,
            Eigen::Matrix<double,-1,-1>::Constant(beta_s_raw_3dim__, K_s,
              std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 2;
      beta_s_raw = in__.template read<
                     std::vector<
                       std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>>(D,
                     S, beta_s_raw_3dim__, K_s);
      std::vector<std::vector<Eigen::Matrix<double,-1,-1>>> beta_o_raw =
        std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>(D,
          std::vector<Eigen::Matrix<double,-1,-1>>(S,
            Eigen::Matrix<double,-1,-1>::Constant(beta_o_raw_3dim__, K_o,
              std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 3;
      beta_o_raw = in__.template read<
                     std::vector<
                       std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>>(D,
                     S, beta_o_raw_3dim__, K_o);
      Eigen::Matrix<double,-1,-1> theta_raw =
        Eigen::Matrix<double,-1,-1>::Constant(theta_raw_1dim__, K_d,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      theta_raw = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,-1>>(theta_raw_1dim__,
                    K_d);
      double prior = std::numeric_limits<double>::quiet_NaN();
      double log_lik = std::numeric_limits<double>::quiet_NaN();
      for (int sym1__ = 1; sym1__ <= K_i; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= beta_i_raw_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= D; ++sym3__) {
            out__.write(stan::model::rvalue(beta_i_raw, "beta_i_raw",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= beta_s_raw_3dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= D; ++sym4__) {
              out__.write(stan::model::rvalue(beta_s_raw, "beta_s_raw",
                            stan::model::index_uni(sym4__),
                            stan::model::index_uni(sym3__),
                            stan::model::index_uni(sym2__),
                            stan::model::index_uni(sym1__)));
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= beta_o_raw_3dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= D; ++sym4__) {
              out__.write(stan::model::rvalue(beta_o_raw, "beta_o_raw",
                            stan::model::index_uni(sym4__),
                            stan::model::index_uni(sym3__),
                            stan::model::index_uni(sym2__),
                            stan::model::index_uni(sym1__)));
            }
          }
        }
      }
      out__.write(theta_raw);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 5;
      prior = 0;
      current_statement__ = 17;
      if (stan::math::logical_eq(penalize, 1)) {
        current_statement__ = 14;
        for (int d = 1; d <= D; ++d) {
          current_statement__ = 8;
          prior = (prior +
            stan::math::normal_lpdf<false>(
              stan::math::to_vector(
                stan::model::rvalue(beta_i_raw, "beta_i_raw",
                  stan::model::index_uni(d))), 0, penalty));
          current_statement__ = 12;
          for (int s = 1; s <= S; ++s) {
            current_statement__ = 9;
            prior = (prior +
              stan::math::normal_lpdf<false>(
                stan::math::to_vector(
                  stan::model::rvalue(beta_s_raw, "beta_s_raw",
                    stan::model::index_uni(d), stan::model::index_uni(s))),
                0, penalty));
            current_statement__ = 10;
            prior = (prior +
              stan::math::normal_lpdf<false>(
                stan::math::to_vector(
                  stan::model::rvalue(beta_o_raw, "beta_o_raw",
                    stan::model::index_uni(d), stan::model::index_uni(s))),
                0, penalty));
          }
        }
        current_statement__ = 15;
        prior = (prior +
          stan::math::normal_lpdf<false>(stan::math::to_vector(theta_raw), 0,
            penalty));
      }
      current_statement__ = 6;
      log_lik = loglik_sc_mix(beta_i_raw, beta_s_raw, beta_o_raw, theta_raw,
                  obs, M, T, N_sample, ids, X_s, X_o, X_i, X_d, pstream__);
      if (emit_transformed_parameters__) {
        out__.write(prior);
        out__.write(log_lik);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double ploglik_N = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      ploglik_N = (prior + log_lik);
      current_statement__ = 20;
      if (stan::math::logical_eq(compute_ploglik_N, 1)) {
        current_statement__ = 18;
        ploglik_N = (prior +
          loglik_sc_mix(beta_i_raw, beta_s_raw, beta_o_raw, theta_raw, obs,
            M, T, N, stan::math::linspaced_int_array(N, 1, N), X_s, X_o, X_i,
            X_d, pstream__));
      }
      out__.write(ploglik_N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> beta_i_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(D,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_i_raw_2dim__,
            K_i, DUMMY_VAR__));
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= K_i; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= beta_i_raw_2dim__; ++sym2__) {
          current_statement__ = 1;
          for (int sym3__ = 1; sym3__ <= D; ++sym3__) {
            current_statement__ = 1;
            stan::model::assign(beta_i_raw, in__.read<local_scalar_t__>(),
              "assigning variable beta_i_raw",
              stan::model::index_uni(sym3__), stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write(beta_i_raw);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>
        beta_s_raw =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(D,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_s_raw_3dim__,
              K_s, DUMMY_VAR__)));
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= beta_s_raw_3dim__; ++sym2__) {
          current_statement__ = 2;
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            current_statement__ = 2;
            for (int sym4__ = 1; sym4__ <= D; ++sym4__) {
              current_statement__ = 2;
              stan::model::assign(beta_s_raw, in__.read<local_scalar_t__>(),
                "assigning variable beta_s_raw",
                stan::model::index_uni(sym4__),
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
            }
          }
        }
      }
      out__.write(beta_s_raw);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>
        beta_o_raw =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(D,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_o_raw_3dim__,
              K_o, DUMMY_VAR__)));
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= beta_o_raw_3dim__; ++sym2__) {
          current_statement__ = 3;
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            current_statement__ = 3;
            for (int sym4__ = 1; sym4__ <= D; ++sym4__) {
              current_statement__ = 3;
              stan::model::assign(beta_o_raw, in__.read<local_scalar_t__>(),
                "assigning variable beta_o_raw",
                stan::model::index_uni(sym4__),
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
            }
          }
        }
      }
      out__.write(beta_o_raw);
      Eigen::Matrix<local_scalar_t__,-1,-1> theta_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(theta_raw_1dim__,
          K_d, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(theta_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(theta_raw_1dim__,
          K_d), "assigning variable theta_raw");
      out__.write(theta_raw);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta_i_raw",
        "double",
        std::vector<size_t>{static_cast<size_t>(D),
          static_cast<size_t>(beta_i_raw_2dim__), static_cast<size_t>(K_i)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta_s_raw",
        "double",
        std::vector<size_t>{static_cast<size_t>(D), static_cast<size_t>(S),
          static_cast<size_t>(beta_s_raw_3dim__), static_cast<size_t>(K_s)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "beta_o_raw",
        "double",
        std::vector<size_t>{static_cast<size_t>(D), static_cast<size_t>(S),
          static_cast<size_t>(beta_o_raw_3dim__), static_cast<size_t>(K_o)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "theta_raw",
        "double",
        std::vector<size_t>{static_cast<size_t>(theta_raw_1dim__),
          static_cast<size_t>(K_d)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> beta_i_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(D,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_i_raw_2dim__,
            K_i, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> beta_i_raw_flat__;
        current_statement__ = 1;
        beta_i_raw_flat__ = context__.vals_r("beta_i_raw");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K_i; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= beta_i_raw_2dim__; ++sym2__) {
            current_statement__ = 1;
            for (int sym3__ = 1; sym3__ <= D; ++sym3__) {
              current_statement__ = 1;
              stan::model::assign(beta_i_raw, beta_i_raw_flat__[(pos__ - 1)],
                "assigning variable beta_i_raw",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 1;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write(beta_i_raw);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>
        beta_s_raw =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(D,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_s_raw_3dim__,
              K_s, DUMMY_VAR__)));
      {
        std::vector<local_scalar_t__> beta_s_raw_flat__;
        current_statement__ = 2;
        beta_s_raw_flat__ = context__.vals_r("beta_s_raw");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= beta_s_raw_3dim__; ++sym2__) {
            current_statement__ = 2;
            for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
              current_statement__ = 2;
              for (int sym4__ = 1; sym4__ <= D; ++sym4__) {
                current_statement__ = 2;
                stan::model::assign(beta_s_raw, beta_s_raw_flat__[(pos__ -
                  1)], "assigning variable beta_s_raw",
                  stan::model::index_uni(sym4__),
                  stan::model::index_uni(sym3__),
                  stan::model::index_uni(sym2__),
                  stan::model::index_uni(sym1__));
                current_statement__ = 2;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      out__.write(beta_s_raw);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>
        beta_o_raw =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(D,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_o_raw_3dim__,
              K_o, DUMMY_VAR__)));
      {
        std::vector<local_scalar_t__> beta_o_raw_flat__;
        current_statement__ = 3;
        beta_o_raw_flat__ = context__.vals_r("beta_o_raw");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= beta_o_raw_3dim__; ++sym2__) {
            current_statement__ = 3;
            for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
              current_statement__ = 3;
              for (int sym4__ = 1; sym4__ <= D; ++sym4__) {
                current_statement__ = 3;
                stan::model::assign(beta_o_raw, beta_o_raw_flat__[(pos__ -
                  1)], "assigning variable beta_o_raw",
                  stan::model::index_uni(sym4__),
                  stan::model::index_uni(sym3__),
                  stan::model::index_uni(sym2__),
                  stan::model::index_uni(sym1__));
                current_statement__ = 3;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      out__.write(beta_o_raw);
      Eigen::Matrix<local_scalar_t__,-1,-1> theta_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(theta_raw_1dim__,
          K_d, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_raw_flat__;
        current_statement__ = 4;
        theta_raw_flat__ = context__.vals_r("theta_raw");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= K_d; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= theta_raw_1dim__; ++sym2__) {
            current_statement__ = 4;
            stan::model::assign(theta_raw, theta_raw_flat__[(pos__ - 1)],
              "assigning variable theta_raw", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 4;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(theta_raw);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta_i_raw", "beta_s_raw",
                "beta_o_raw", "theta_raw"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"prior", "log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"ploglik_N"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(D),
                                                 static_cast<size_t>(
                                                   beta_i_raw_2dim__),
                                                 static_cast<size_t>(K_i)},
                std::vector<size_t>{static_cast<size_t>(D),
                  static_cast<size_t>(S),
                  static_cast<size_t>(beta_s_raw_3dim__),
                  static_cast<size_t>(K_s)},
                std::vector<size_t>{static_cast<size_t>(D),
                  static_cast<size_t>(S),
                  static_cast<size_t>(beta_o_raw_3dim__),
                  static_cast<size_t>(K_o)},
                std::vector<size_t>{static_cast<size_t>(theta_raw_1dim__),
                  static_cast<size_t>(K_d)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>> temp{std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K_i; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= beta_i_raw_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= D; ++sym3__) {
          param_names__.emplace_back(std::string() + "beta_i_raw" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= beta_s_raw_3dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
          for (int sym4__ = 1; sym4__ <= D; ++sym4__) {
            param_names__.emplace_back(std::string() + "beta_s_raw" + '.' +
              std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' +
              std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= beta_o_raw_3dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
          for (int sym4__ = 1; sym4__ <= D; ++sym4__) {
            param_names__.emplace_back(std::string() + "beta_o_raw" + '.' +
              std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' +
              std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= K_d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= theta_raw_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "theta_raw" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "prior");
      param_names__.emplace_back(std::string() + "log_lik");
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "ploglik_N");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K_i; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= beta_i_raw_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= D; ++sym3__) {
          param_names__.emplace_back(std::string() + "beta_i_raw" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= beta_s_raw_3dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
          for (int sym4__ = 1; sym4__ <= D; ++sym4__) {
            param_names__.emplace_back(std::string() + "beta_s_raw" + '.' +
              std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' +
              std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= beta_o_raw_3dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
          for (int sym4__ = 1; sym4__ <= D; ++sym4__) {
            param_names__.emplace_back(std::string() + "beta_o_raw" + '.' +
              std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' +
              std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= K_d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= theta_raw_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "theta_raw" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "prior");
      param_names__.emplace_back(std::string() + "log_lik");
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "ploglik_N");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_i_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(beta_i_raw_2dim__) + ",\"cols\":" + std::to_string(K_i) + "}},\"block\":\"parameters\"},{\"name\":\"beta_s_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(beta_s_raw_3dim__) + ",\"cols\":" + std::to_string(K_s) + "}}},\"block\":\"parameters\"},{\"name\":\"beta_o_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(beta_o_raw_3dim__) + ",\"cols\":" + std::to_string(K_o) + "}}},\"block\":\"parameters\"},{\"name\":\"theta_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(theta_raw_1dim__) + ",\"cols\":" + std::to_string(K_d) + "},\"block\":\"parameters\"},{\"name\":\"prior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"ploglik_N\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_i_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(beta_i_raw_2dim__) + ",\"cols\":" + std::to_string(K_i) + "}},\"block\":\"parameters\"},{\"name\":\"beta_s_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(beta_s_raw_3dim__) + ",\"cols\":" + std::to_string(K_s) + "}}},\"block\":\"parameters\"},{\"name\":\"beta_o_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(beta_o_raw_3dim__) + ",\"cols\":" + std::to_string(K_o) + "}}},\"block\":\"parameters\"},{\"name\":\"theta_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(theta_raw_1dim__) + ",\"cols\":" + std::to_string(K_d) + "},\"block\":\"parameters\"},{\"name\":\"prior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"ploglik_N\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((D * beta_i_raw_2dim__) * K_i) + (((D *
      S) * beta_s_raw_3dim__) * K_s)) + (((D * S) * beta_o_raw_3dim__) *
      K_o)) + (theta_raw_1dim__ * K_d));
    const size_t num_transformed = emit_transformed_parameters * ((1 + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (1);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((D * beta_i_raw_2dim__) * K_i) + (((D *
      S) * beta_s_raw_3dim__) * K_s)) + (((D * S) * beta_o_raw_3dim__) *
      K_o)) + (theta_raw_1dim__ * K_d));
    const size_t num_transformed = emit_transformed_parameters * ((1 + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (1);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_mnhmm_namespace::model_mnhmm;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mnhmm_namespace::profiles__;
}
#endif
#endif
