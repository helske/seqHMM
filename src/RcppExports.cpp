// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// EM
Rcpp::List EM(const arma::mat& transition_, const arma::cube& emission_, const arma::vec& init_, const arma::ucube& obs, const arma::uvec& nSymbols, int itermax, double tol, int trace, arma::uword threads);
RcppExport SEXP _seqHMM_EM(SEXP transition_SEXP, SEXP emission_SEXP, SEXP init_SEXP, SEXP obsSEXP, SEXP nSymbolsSEXP, SEXP itermaxSEXP, SEXP tolSEXP, SEXP traceSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition_(transition_SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission_(emission_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_(init_SEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(EM(transition_, emission_, init_, obs, nSymbols, itermax, tol, trace, threads));
    return rcpp_result_gen;
END_RCPP
}
// EMx
Rcpp::List EMx(const arma::mat& transition_, const arma::cube& emission_, const arma::vec& init_, const arma::ucube& obs, const arma::uvec& nSymbols, const arma::mat& coef_, const arma::mat& X, const arma::uvec& numberOfStates, int itermax, double tol, int trace, arma::uword threads);
RcppExport SEXP _seqHMM_EMx(SEXP transition_SEXP, SEXP emission_SEXP, SEXP init_SEXP, SEXP obsSEXP, SEXP nSymbolsSEXP, SEXP coef_SEXP, SEXP XSEXP, SEXP numberOfStatesSEXP, SEXP itermaxSEXP, SEXP tolSEXP, SEXP traceSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition_(transition_SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission_(emission_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_(init_SEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coef_(coef_SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(EMx(transition_, emission_, init_, obs, nSymbols, coef_, X, numberOfStates, itermax, tol, trace, threads));
    return rcpp_result_gen;
END_RCPP
}
// cost_matrix_singlechannel
arma::mat cost_matrix_singlechannel(const arma::mat& gamma_pi_est, const arma::mat& gamma_pi_ref, const arma::cube& gamma_A_est, const arma::cube& gamma_A_ref, const arma::cube& gamma_B_est, const arma::cube& gamma_B_ref);
RcppExport SEXP _seqHMM_cost_matrix_singlechannel(SEXP gamma_pi_estSEXP, SEXP gamma_pi_refSEXP, SEXP gamma_A_estSEXP, SEXP gamma_A_refSEXP, SEXP gamma_B_estSEXP, SEXP gamma_B_refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma_pi_est(gamma_pi_estSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma_pi_ref(gamma_pi_refSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type gamma_A_est(gamma_A_estSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type gamma_A_ref(gamma_A_refSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type gamma_B_est(gamma_B_estSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type gamma_B_ref(gamma_B_refSEXP);
    rcpp_result_gen = Rcpp::wrap(cost_matrix_singlechannel(gamma_pi_est, gamma_pi_ref, gamma_A_est, gamma_A_ref, gamma_B_est, gamma_B_ref));
    return rcpp_result_gen;
END_RCPP
}
// cost_matrix_multichannel
arma::mat cost_matrix_multichannel(const arma::mat& gamma_pi_est, const arma::mat& gamma_pi_ref, const arma::cube& gamma_A_est, const arma::cube& gamma_A_ref, const arma::field<arma::cube>& gamma_B_est, const arma::field<arma::cube>& gamma_B_ref);
RcppExport SEXP _seqHMM_cost_matrix_multichannel(SEXP gamma_pi_estSEXP, SEXP gamma_pi_refSEXP, SEXP gamma_A_estSEXP, SEXP gamma_A_refSEXP, SEXP gamma_B_estSEXP, SEXP gamma_B_refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma_pi_est(gamma_pi_estSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma_pi_ref(gamma_pi_refSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type gamma_A_est(gamma_A_estSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type gamma_A_ref(gamma_A_refSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type gamma_B_est(gamma_B_estSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type gamma_B_ref(gamma_B_refSEXP);
    rcpp_result_gen = Rcpp::wrap(cost_matrix_multichannel(gamma_pi_est, gamma_pi_ref, gamma_A_est, gamma_A_ref, gamma_B_est, gamma_B_ref));
    return rcpp_result_gen;
END_RCPP
}
// cost_matrix_clusters
arma::mat cost_matrix_clusters(const arma::mat& pcp_est, const arma::mat& pcp_mle);
RcppExport SEXP _seqHMM_cost_matrix_clusters(SEXP pcp_estSEXP, SEXP pcp_mleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type pcp_est(pcp_estSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pcp_mle(pcp_mleSEXP);
    rcpp_result_gen = Rcpp::wrap(cost_matrix_clusters(pcp_est, pcp_mle));
    return rcpp_result_gen;
END_RCPP
}
// create_Q
arma::mat create_Q(const arma::uword n);
RcppExport SEXP _seqHMM_create_Q(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(create_Q(n));
    return rcpp_result_gen;
END_RCPP
}
// eta_to_gamma_mat
arma::mat eta_to_gamma_mat(const arma::mat& eta);
RcppExport SEXP _seqHMM_eta_to_gamma_mat(SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(eta_to_gamma_mat(eta));
    return rcpp_result_gen;
END_RCPP
}
// eta_to_gamma_cube
arma::cube eta_to_gamma_cube(const arma::cube& eta);
RcppExport SEXP _seqHMM_eta_to_gamma_cube(SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(eta_to_gamma_cube(eta));
    return rcpp_result_gen;
END_RCPP
}
// eta_to_gamma_mat_field
arma::field<arma::mat> eta_to_gamma_mat_field(const arma::field<arma::mat>& eta);
RcppExport SEXP _seqHMM_eta_to_gamma_mat_field(SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(eta_to_gamma_mat_field(eta));
    return rcpp_result_gen;
END_RCPP
}
// eta_to_gamma_cube_field
arma::field<arma::cube> eta_to_gamma_cube_field(const arma::field<arma::cube>& eta);
RcppExport SEXP _seqHMM_eta_to_gamma_cube_field(SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(eta_to_gamma_cube_field(eta));
    return rcpp_result_gen;
END_RCPP
}
// fast_quantiles
arma::mat fast_quantiles(const arma::mat& X, const arma::vec& probs);
RcppExport SEXP _seqHMM_fast_quantiles(SEXP XSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_quantiles(X, probs));
    return rcpp_result_gen;
END_RCPP
}
// forwardbackward
Rcpp::List forwardbackward(const arma::mat& transition, const arma::cube& emission, const arma::vec& init, const arma::ucube& obs, bool forwardonly, arma::uword threads);
RcppExport SEXP _seqHMM_forwardbackward(SEXP transitionSEXP, SEXP emissionSEXP, SEXP initSEXP, SEXP obsSEXP, SEXP forwardonlySEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission(emissionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< bool >::type forwardonly(forwardonlySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(forwardbackward(transition, emission, init, obs, forwardonly, threads));
    return rcpp_result_gen;
END_RCPP
}
// forwardbackwardx
Rcpp::List forwardbackwardx(const arma::mat& transition, const arma::cube& emission, const arma::vec& init, const arma::ucube obs, const arma::mat& coef, const arma::mat& X, const arma::uvec& numberOfStates, bool forwardonly, arma::uword threads);
RcppExport SEXP _seqHMM_forwardbackwardx(SEXP transitionSEXP, SEXP emissionSEXP, SEXP initSEXP, SEXP obsSEXP, SEXP coefSEXP, SEXP XSEXP, SEXP numberOfStatesSEXP, SEXP forwardonlySEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission(emissionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::ucube >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< bool >::type forwardonly(forwardonlySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(forwardbackwardx(transition, emission, init, obs, coef, X, numberOfStates, forwardonly, threads));
    return rcpp_result_gen;
END_RCPP
}
// get_omega
arma::vec get_omega(const arma::mat& gamma, const arma::vec& X);
RcppExport SEXP _seqHMM_get_omega(SEXP gammaSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(get_omega(gamma, X));
    return rcpp_result_gen;
END_RCPP
}
// get_log_omega
arma::vec get_log_omega(const arma::mat& gamma, const arma::vec& X);
RcppExport SEXP _seqHMM_get_log_omega(SEXP gammaSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(get_log_omega(gamma, X));
    return rcpp_result_gen;
END_RCPP
}
// get_omega_all
arma::mat get_omega_all(const arma::mat& gamma, const arma::mat& X);
RcppExport SEXP _seqHMM_get_omega_all(SEXP gammaSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(get_omega_all(gamma, X));
    return rcpp_result_gen;
END_RCPP
}
// get_pi
arma::vec get_pi(const arma::mat& gamma, const arma::vec& X);
RcppExport SEXP _seqHMM_get_pi(SEXP gammaSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pi(gamma, X));
    return rcpp_result_gen;
END_RCPP
}
// get_log_pi
arma::vec get_log_pi(const arma::mat& gamma, const arma::vec& X);
RcppExport SEXP _seqHMM_get_log_pi(SEXP gammaSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(get_log_pi(gamma, X));
    return rcpp_result_gen;
END_RCPP
}
// get_A
arma::cube get_A(const arma::cube& gamma, const arma::mat& X, const bool tv);
RcppExport SEXP _seqHMM_get_A(SEXP gammaSEXP, SEXP XSEXP, SEXP tvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv(tvSEXP);
    rcpp_result_gen = Rcpp::wrap(get_A(gamma, X, tv));
    return rcpp_result_gen;
END_RCPP
}
// get_log_A
arma::cube get_log_A(const arma::cube& gamma, const arma::mat& X, const bool tv);
RcppExport SEXP _seqHMM_get_log_A(SEXP gammaSEXP, SEXP XSEXP, SEXP tvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv(tvSEXP);
    rcpp_result_gen = Rcpp::wrap(get_log_A(gamma, X, tv));
    return rcpp_result_gen;
END_RCPP
}
// get_B
arma::cube get_B(const arma::cube& gamma, const arma::mat& X, const bool tv, const bool add_missing);
RcppExport SEXP _seqHMM_get_B(SEXP gammaSEXP, SEXP XSEXP, SEXP tvSEXP, SEXP add_missingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv(tvSEXP);
    Rcpp::traits::input_parameter< const bool >::type add_missing(add_missingSEXP);
    rcpp_result_gen = Rcpp::wrap(get_B(gamma, X, tv, add_missing));
    return rcpp_result_gen;
END_RCPP
}
// get_log_B
arma::cube get_log_B(const arma::cube& gamma, const arma::mat& X, const bool tv, const bool add_missing);
RcppExport SEXP _seqHMM_get_log_B(SEXP gammaSEXP, SEXP XSEXP, SEXP tvSEXP, SEXP add_missingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv(tvSEXP);
    Rcpp::traits::input_parameter< const bool >::type add_missing(add_missingSEXP);
    rcpp_result_gen = Rcpp::wrap(get_log_B(gamma, X, tv, add_missing));
    return rcpp_result_gen;
END_RCPP
}
// get_pi_all
arma::mat get_pi_all(const arma::mat& gamma, const arma::mat& X);
RcppExport SEXP _seqHMM_get_pi_all(SEXP gammaSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pi_all(gamma, X));
    return rcpp_result_gen;
END_RCPP
}
// get_A_all
arma::field<arma::cube> get_A_all(const arma::cube& gamma, const arma::cube& X, const bool tv);
RcppExport SEXP _seqHMM_get_A_all(SEXP gammaSEXP, SEXP XSEXP, SEXP tvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv(tvSEXP);
    rcpp_result_gen = Rcpp::wrap(get_A_all(gamma, X, tv));
    return rcpp_result_gen;
END_RCPP
}
// get_B_all
arma::field<arma::cube> get_B_all(const arma::cube& gamma, const arma::cube& X, const bool tv);
RcppExport SEXP _seqHMM_get_B_all(SEXP gammaSEXP, SEXP XSEXP, SEXP tvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv(tvSEXP);
    rcpp_result_gen = Rcpp::wrap(get_B_all(gamma, X, tv));
    return rcpp_result_gen;
END_RCPP
}
// get_pi_qs
arma::mat get_pi_qs(const arma::field<arma::mat>& gamma, const arma::mat& X, const arma::vec& probs);
RcppExport SEXP _seqHMM_get_pi_qs(SEXP gammaSEXP, SEXP XSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pi_qs(gamma, X, probs));
    return rcpp_result_gen;
END_RCPP
}
// get_A_qs
arma::mat get_A_qs(const arma::field<arma::cube>& gamma, const arma::cube& X, const bool tv, const arma::vec& probs);
RcppExport SEXP _seqHMM_get_A_qs(SEXP gammaSEXP, SEXP XSEXP, SEXP tvSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv(tvSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_A_qs(gamma, X, tv, probs));
    return rcpp_result_gen;
END_RCPP
}
// get_B_qs
arma::mat get_B_qs(const arma::field<arma::cube>& gamma, const arma::cube& X, const bool tv, const arma::vec& probs);
RcppExport SEXP _seqHMM_get_B_qs(SEXP gammaSEXP, SEXP XSEXP, SEXP tvSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv(tvSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_B_qs(gamma, X, tv, probs));
    return rcpp_result_gen;
END_RCPP
}
// get_omega_qs
arma::mat get_omega_qs(const arma::field<arma::mat>& gamma, const arma::mat& X, const arma::vec& probs);
RcppExport SEXP _seqHMM_get_omega_qs(SEXP gammaSEXP, SEXP XSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_omega_qs(gamma, X, probs));
    return rcpp_result_gen;
END_RCPP
}
// get_pi_ame
arma::mat get_pi_ame(const arma::field<arma::mat>& gamma, const arma::mat& X1, const arma::mat& X2, const arma::vec& probs);
RcppExport SEXP _seqHMM_get_pi_ame(SEXP gammaSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pi_ame(gamma, X1, X2, probs));
    return rcpp_result_gen;
END_RCPP
}
// get_A_ame
arma::mat get_A_ame(const arma::field<arma::cube>& gamma, const arma::cube& X1, const arma::cube& X2, const bool tv, const arma::vec& probs);
RcppExport SEXP _seqHMM_get_A_ame(SEXP gammaSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP tvSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const bool >::type tv(tvSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_A_ame(gamma, X1, X2, tv, probs));
    return rcpp_result_gen;
END_RCPP
}
// get_B_ame
arma::mat get_B_ame(const arma::field<arma::cube>& gamma, const arma::cube& X1, const arma::cube& X2, const bool tv, const arma::vec& probs);
RcppExport SEXP _seqHMM_get_B_ame(SEXP gammaSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP tvSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const bool >::type tv(tvSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_B_ame(gamma, X1, X2, tv, probs));
    return rcpp_result_gen;
END_RCPP
}
// get_omega_ame
arma::mat get_omega_ame(const arma::field<arma::mat>& gamma, const arma::mat& X1, const arma::mat& X2, const arma::vec& probs);
RcppExport SEXP _seqHMM_get_omega_ame(SEXP gammaSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_omega_ame(gamma, X1, X2, probs));
    return rcpp_result_gen;
END_RCPP
}
// logLikHMM
Rcpp::NumericVector logLikHMM(const arma::mat& transition, const arma::cube& emission, const arma::vec& init, const arma::ucube& obs, arma::uword threads);
RcppExport SEXP _seqHMM_logLikHMM(SEXP transitionSEXP, SEXP emissionSEXP, SEXP initSEXP, SEXP obsSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission(emissionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikHMM(transition, emission, init, obs, threads));
    return rcpp_result_gen;
END_RCPP
}
// logLikMixHMM
Rcpp::NumericVector logLikMixHMM(const arma::mat& transition, const arma::cube& emission, const arma::vec& init, const arma::ucube& obs, const arma::mat& coef, const arma::mat& X, const arma::uvec& numberOfStates, arma::uword threads);
RcppExport SEXP _seqHMM_logLikMixHMM(SEXP transitionSEXP, SEXP emissionSEXP, SEXP initSEXP, SEXP obsSEXP, SEXP coefSEXP, SEXP XSEXP, SEXP numberOfStatesSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission(emissionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikMixHMM(transition, emission, init, obs, coef, X, numberOfStates, threads));
    return rcpp_result_gen;
END_RCPP
}
// logSumExp
double logSumExp(const arma::vec& x);
RcppExport SEXP _seqHMM_logSumExp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logSumExp(x));
    return rcpp_result_gen;
END_RCPP
}
// log_EM
Rcpp::List log_EM(const arma::mat& transition_, const arma::cube& emission_, const arma::vec& init_, const arma::ucube& obs, const arma::uvec& nSymbols, int itermax, double tol, int trace, arma::uword threads);
RcppExport SEXP _seqHMM_log_EM(SEXP transition_SEXP, SEXP emission_SEXP, SEXP init_SEXP, SEXP obsSEXP, SEXP nSymbolsSEXP, SEXP itermaxSEXP, SEXP tolSEXP, SEXP traceSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition_(transition_SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission_(emission_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_(init_SEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(log_EM(transition_, emission_, init_, obs, nSymbols, itermax, tol, trace, threads));
    return rcpp_result_gen;
END_RCPP
}
// log_EMx
Rcpp::List log_EMx(const arma::mat& transition_, const arma::cube& emission_, const arma::vec& init_, const arma::ucube& obs, const arma::uvec& nSymbols, const arma::mat& coef_, const arma::mat& X, const arma::uvec& numberOfStates, int itermax, double tol, int trace, arma::uword threads);
RcppExport SEXP _seqHMM_log_EMx(SEXP transition_SEXP, SEXP emission_SEXP, SEXP init_SEXP, SEXP obsSEXP, SEXP nSymbolsSEXP, SEXP coef_SEXP, SEXP XSEXP, SEXP numberOfStatesSEXP, SEXP itermaxSEXP, SEXP tolSEXP, SEXP traceSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition_(transition_SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission_(emission_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_(init_SEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coef_(coef_SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(log_EMx(transition_, emission_, init_, obs, nSymbols, coef_, X, numberOfStates, itermax, tol, trace, threads));
    return rcpp_result_gen;
END_RCPP
}
// log_forwardbackward
Rcpp::List log_forwardbackward(const arma::mat& transition_, const arma::cube& emission_, const arma::vec& init_, const arma::ucube& obs, bool forwardonly, arma::uword threads);
RcppExport SEXP _seqHMM_log_forwardbackward(SEXP transition_SEXP, SEXP emission_SEXP, SEXP init_SEXP, SEXP obsSEXP, SEXP forwardonlySEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition_(transition_SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission_(emission_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_(init_SEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< bool >::type forwardonly(forwardonlySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(log_forwardbackward(transition_, emission_, init_, obs, forwardonly, threads));
    return rcpp_result_gen;
END_RCPP
}
// log_forwardbackwardx
Rcpp::List log_forwardbackwardx(const arma::mat& transition_, const arma::cube& emission_, const arma::vec& init_, const arma::ucube& obs, const arma::mat& coef, const arma::mat& X, const arma::uvec& numberOfStates, bool forwardonly, arma::uword threads);
RcppExport SEXP _seqHMM_log_forwardbackwardx(SEXP transition_SEXP, SEXP emission_SEXP, SEXP init_SEXP, SEXP obsSEXP, SEXP coefSEXP, SEXP XSEXP, SEXP numberOfStatesSEXP, SEXP forwardonlySEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition_(transition_SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission_(emission_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_(init_SEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< bool >::type forwardonly(forwardonlySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(log_forwardbackwardx(transition_, emission_, init_, obs, coef, X, numberOfStates, forwardonly, threads));
    return rcpp_result_gen;
END_RCPP
}
// log_logLikHMM
Rcpp::NumericVector log_logLikHMM(const arma::mat& transition_, const arma::cube& emission_, const arma::vec& init_, const arma::ucube& obs, arma::uword threads);
RcppExport SEXP _seqHMM_log_logLikHMM(SEXP transition_SEXP, SEXP emission_SEXP, SEXP init_SEXP, SEXP obsSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition_(transition_SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission_(emission_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_(init_SEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(log_logLikHMM(transition_, emission_, init_, obs, threads));
    return rcpp_result_gen;
END_RCPP
}
// log_logLikMixHMM
Rcpp::NumericVector log_logLikMixHMM(arma::mat transition, arma::cube emission, arma::vec init, const arma::ucube& obs, const arma::mat& coef, const arma::mat& X, const arma::uvec& numberOfStates, arma::uword threads);
RcppExport SEXP _seqHMM_log_logLikMixHMM(SEXP transitionSEXP, SEXP emissionSEXP, SEXP initSEXP, SEXP obsSEXP, SEXP coefSEXP, SEXP XSEXP, SEXP numberOfStatesSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type emission(emissionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(log_logLikMixHMM(transition, emission, init, obs, coef, X, numberOfStates, threads));
    return rcpp_result_gen;
END_RCPP
}
// log_objective
Rcpp::List log_objective(const arma::mat& transition, const arma::cube& emission, const arma::vec& init, const arma::ucube& obs, const arma::umat& ANZ, const arma::ucube& BNZ, const arma::uvec& INZ, arma::uvec& nSymbols, arma::uword threads);
RcppExport SEXP _seqHMM_log_objective(SEXP transitionSEXP, SEXP emissionSEXP, SEXP initSEXP, SEXP obsSEXP, SEXP ANZSEXP, SEXP BNZSEXP, SEXP INZSEXP, SEXP nSymbolsSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission(emissionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type ANZ(ANZSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type BNZ(BNZSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type INZ(INZSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(log_objective(transition, emission, init, obs, ANZ, BNZ, INZ, nSymbols, threads));
    return rcpp_result_gen;
END_RCPP
}
// log_objectivex
Rcpp::List log_objectivex(const arma::mat& transition, const arma::cube& emission, const arma::vec& init, const arma::ucube& obs, const arma::umat& ANZ, const arma::ucube& BNZ, const arma::uvec& INZ, const arma::uvec& nSymbols, const arma::mat& coef, const arma::mat& X, const arma::uvec& numberOfStates, arma::uword threads);
RcppExport SEXP _seqHMM_log_objectivex(SEXP transitionSEXP, SEXP emissionSEXP, SEXP initSEXP, SEXP obsSEXP, SEXP ANZSEXP, SEXP BNZSEXP, SEXP INZSEXP, SEXP nSymbolsSEXP, SEXP coefSEXP, SEXP XSEXP, SEXP numberOfStatesSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission(emissionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type ANZ(ANZSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type BNZ(BNZSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type INZ(INZSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(log_objectivex(transition, emission, init, obs, ANZ, BNZ, INZ, nSymbols, coef, X, numberOfStates, threads));
    return rcpp_result_gen;
END_RCPP
}
// EM_LBFGS_nhmm_singlechannel
Rcpp::List EM_LBFGS_nhmm_singlechannel(arma::mat& eta_pi, const arma::mat& X_pi, arma::cube& eta_A, const arma::cube& X_A, arma::cube& eta_B, const arma::cube& X_B, const arma::umat& obs, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B, const arma::uvec& Ti, const arma::uword n_obs, const arma::uword maxeval, const double ftol_abs, const double ftol_rel, const double xtol_abs, const double xtol_rel, const arma::uword print_level, const arma::uword maxeval_m, const double ftol_abs_m, const double ftol_rel_m, const double xtol_abs_m, const double xtol_rel_m, const arma::uword print_level_m, const double lambda);
RcppExport SEXP _seqHMM_EM_LBFGS_nhmm_singlechannel(SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP, SEXP TiSEXP, SEXP n_obsSEXP, SEXP maxevalSEXP, SEXP ftol_absSEXP, SEXP ftol_relSEXP, SEXP xtol_absSEXP, SEXP xtol_relSEXP, SEXP print_levelSEXP, SEXP maxeval_mSEXP, SEXP ftol_abs_mSEXP, SEXP ftol_rel_mSEXP, SEXP xtol_abs_mSEXP, SEXP xtol_rel_mSEXP, SEXP print_level_mSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type n_obs(n_obsSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type maxeval(maxevalSEXP);
    Rcpp::traits::input_parameter< const double >::type ftol_abs(ftol_absSEXP);
    Rcpp::traits::input_parameter< const double >::type ftol_rel(ftol_relSEXP);
    Rcpp::traits::input_parameter< const double >::type xtol_abs(xtol_absSEXP);
    Rcpp::traits::input_parameter< const double >::type xtol_rel(xtol_relSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type print_level(print_levelSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type maxeval_m(maxeval_mSEXP);
    Rcpp::traits::input_parameter< const double >::type ftol_abs_m(ftol_abs_mSEXP);
    Rcpp::traits::input_parameter< const double >::type ftol_rel_m(ftol_rel_mSEXP);
    Rcpp::traits::input_parameter< const double >::type xtol_abs_m(xtol_abs_mSEXP);
    Rcpp::traits::input_parameter< const double >::type xtol_rel_m(xtol_rel_mSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type print_level_m(print_level_mSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(EM_LBFGS_nhmm_singlechannel(eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, iv_pi, iv_A, iv_B, tv_A, tv_B, Ti, n_obs, maxeval, ftol_abs, ftol_rel, xtol_abs, xtol_rel, print_level, maxeval_m, ftol_abs_m, ftol_rel_m, xtol_abs_m, xtol_rel_m, print_level_m, lambda));
    return rcpp_result_gen;
END_RCPP
}
// EM_LBFGS_nhmm_multichannel
Rcpp::List EM_LBFGS_nhmm_multichannel(arma::mat& eta_pi, const arma::mat& X_pi, arma::cube& eta_A, const arma::cube& X_A, arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::ucube& obs, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B, const arma::uvec& Ti, const arma::uword n_obs, const arma::uword maxeval, const double ftol_abs, const double ftol_rel, const double xtol_abs, const double xtol_rel, const arma::uword print_level, const arma::uword maxeval_m, const double ftol_abs_m, const double ftol_rel_m, const double xtol_abs_m, const double xtol_rel_m, const arma::uword print_level_m, const double lambda);
RcppExport SEXP _seqHMM_EM_LBFGS_nhmm_multichannel(SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP, SEXP TiSEXP, SEXP n_obsSEXP, SEXP maxevalSEXP, SEXP ftol_absSEXP, SEXP ftol_relSEXP, SEXP xtol_absSEXP, SEXP xtol_relSEXP, SEXP print_levelSEXP, SEXP maxeval_mSEXP, SEXP ftol_abs_mSEXP, SEXP ftol_rel_mSEXP, SEXP xtol_abs_mSEXP, SEXP xtol_rel_mSEXP, SEXP print_level_mSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type n_obs(n_obsSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type maxeval(maxevalSEXP);
    Rcpp::traits::input_parameter< const double >::type ftol_abs(ftol_absSEXP);
    Rcpp::traits::input_parameter< const double >::type ftol_rel(ftol_relSEXP);
    Rcpp::traits::input_parameter< const double >::type xtol_abs(xtol_absSEXP);
    Rcpp::traits::input_parameter< const double >::type xtol_rel(xtol_relSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type print_level(print_levelSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type maxeval_m(maxeval_mSEXP);
    Rcpp::traits::input_parameter< const double >::type ftol_abs_m(ftol_abs_mSEXP);
    Rcpp::traits::input_parameter< const double >::type ftol_rel_m(ftol_rel_mSEXP);
    Rcpp::traits::input_parameter< const double >::type xtol_abs_m(xtol_abs_mSEXP);
    Rcpp::traits::input_parameter< const double >::type xtol_rel_m(xtol_rel_mSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type print_level_m(print_level_mSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(EM_LBFGS_nhmm_multichannel(eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, iv_pi, iv_A, iv_B, tv_A, tv_B, Ti, n_obs, maxeval, ftol_abs, ftol_rel, xtol_abs, xtol_rel, print_level, maxeval_m, ftol_abs_m, ftol_rel_m, xtol_abs_m, xtol_rel_m, print_level_m, lambda));
    return rcpp_result_gen;
END_RCPP
}
// backward_nhmm_singlechannel
arma::cube backward_nhmm_singlechannel(arma::mat& eta_pi, const arma::mat& X_pi, arma::cube& eta_A, const arma::cube& X_A, arma::cube& eta_B, const arma::cube& X_B, const arma::umat& obs, const arma::uvec Ti, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B);
RcppExport SEXP _seqHMM_backward_nhmm_singlechannel(SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP TiSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    rcpp_result_gen = Rcpp::wrap(backward_nhmm_singlechannel(eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, Ti, iv_pi, iv_A, iv_B, tv_A, tv_B));
    return rcpp_result_gen;
END_RCPP
}
// backward_nhmm_multichannel
arma::cube backward_nhmm_multichannel(arma::mat& eta_pi, const arma::mat& X_pi, arma::cube& eta_A, const arma::cube& X_A, arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::ucube& obs, const arma::uvec Ti, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B);
RcppExport SEXP _seqHMM_backward_nhmm_multichannel(SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP TiSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    rcpp_result_gen = Rcpp::wrap(backward_nhmm_multichannel(eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, Ti, iv_pi, iv_A, iv_B, tv_A, tv_B));
    return rcpp_result_gen;
END_RCPP
}
// backward_mnhmm_singlechannel
arma::cube backward_mnhmm_singlechannel(arma::mat& eta_omega, const arma::mat& X_omega, arma::field<arma::mat>& eta_pi, const arma::mat& X_pi, arma::field<arma::cube>& eta_A, const arma::cube& X_A, arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::umat& obs, const arma::uvec Ti, const bool iv_omega, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B);
RcppExport SEXP _seqHMM_backward_mnhmm_singlechannel(SEXP eta_omegaSEXP, SEXP X_omegaSEXP, SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP TiSEXP, SEXP iv_omegaSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_omega(eta_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_omega(X_omegaSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_omega(iv_omegaSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    rcpp_result_gen = Rcpp::wrap(backward_mnhmm_singlechannel(eta_omega, X_omega, eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, Ti, iv_omega, iv_pi, iv_A, iv_B, tv_A, tv_B));
    return rcpp_result_gen;
END_RCPP
}
// backward_mnhmm_multichannel
arma::cube backward_mnhmm_multichannel(arma::mat& eta_omega, const arma::mat& X_omega, arma::field<arma::mat>& eta_pi, const arma::mat& X_pi, arma::field<arma::cube>& eta_A, const arma::cube& X_A, arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::ucube& obs, const arma::uvec Ti, const bool iv_omega, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B);
RcppExport SEXP _seqHMM_backward_mnhmm_multichannel(SEXP eta_omegaSEXP, SEXP X_omegaSEXP, SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP TiSEXP, SEXP iv_omegaSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_omega(eta_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_omega(X_omegaSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_omega(iv_omegaSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    rcpp_result_gen = Rcpp::wrap(backward_mnhmm_multichannel(eta_omega, X_omega, eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, Ti, iv_omega, iv_pi, iv_A, iv_B, tv_A, tv_B));
    return rcpp_result_gen;
END_RCPP
}
// forward_nhmm_singlechannel
arma::cube forward_nhmm_singlechannel(arma::mat& eta_pi, const arma::mat& X_pi, arma::cube& eta_A, const arma::cube& X_A, arma::cube& eta_B, const arma::cube& X_B, const arma::umat& obs, const arma::uvec Ti, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B);
RcppExport SEXP _seqHMM_forward_nhmm_singlechannel(SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP TiSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_nhmm_singlechannel(eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, Ti, iv_pi, iv_A, iv_B, tv_A, tv_B));
    return rcpp_result_gen;
END_RCPP
}
// forward_nhmm_multichannel
arma::cube forward_nhmm_multichannel(arma::mat& eta_pi, const arma::mat& X_pi, arma::cube& eta_A, const arma::cube& X_A, arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::ucube& obs, const arma::uvec Ti, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B);
RcppExport SEXP _seqHMM_forward_nhmm_multichannel(SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP TiSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_nhmm_multichannel(eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, Ti, iv_pi, iv_A, iv_B, tv_A, tv_B));
    return rcpp_result_gen;
END_RCPP
}
// forward_mnhmm_singlechannel
arma::cube forward_mnhmm_singlechannel(arma::mat& eta_omega, const arma::mat& X_omega, arma::field<arma::mat>& eta_pi, const arma::mat& X_pi, arma::field<arma::cube>& eta_A, const arma::cube& X_A, arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::umat& obs, const arma::uvec Ti, const bool iv_omega, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B);
RcppExport SEXP _seqHMM_forward_mnhmm_singlechannel(SEXP eta_omegaSEXP, SEXP X_omegaSEXP, SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP TiSEXP, SEXP iv_omegaSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_omega(eta_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_omega(X_omegaSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_omega(iv_omegaSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_mnhmm_singlechannel(eta_omega, X_omega, eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, Ti, iv_omega, iv_pi, iv_A, iv_B, tv_A, tv_B));
    return rcpp_result_gen;
END_RCPP
}
// forward_mnhmm_multichannel
arma::cube forward_mnhmm_multichannel(arma::mat& eta_omega, const arma::mat& X_omega, arma::field<arma::mat>& eta_pi, const arma::mat& X_pi, arma::field<arma::cube>& eta_A, const arma::cube& X_A, arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::ucube& obs, const arma::uvec Ti, const bool iv_omega, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B);
RcppExport SEXP _seqHMM_forward_mnhmm_multichannel(SEXP eta_omegaSEXP, SEXP X_omegaSEXP, SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP TiSEXP, SEXP iv_omegaSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_omega(eta_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_omega(X_omegaSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_omega(iv_omegaSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_mnhmm_multichannel(eta_omega, X_omega, eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, Ti, iv_omega, iv_pi, iv_A, iv_B, tv_A, tv_B));
    return rcpp_result_gen;
END_RCPP
}
// log_objective_nhmm_singlechannel
Rcpp::List log_objective_nhmm_singlechannel(arma::mat& eta_pi, const arma::mat& X_pi, arma::cube& eta_A, const arma::cube& X_A, arma::cube& eta_B, const arma::cube& X_B, const arma::umat& obs, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B, const arma::uvec& Ti);
RcppExport SEXP _seqHMM_log_objective_nhmm_singlechannel(SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP, SEXP TiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Ti(TiSEXP);
    rcpp_result_gen = Rcpp::wrap(log_objective_nhmm_singlechannel(eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, iv_pi, iv_A, iv_B, tv_A, tv_B, Ti));
    return rcpp_result_gen;
END_RCPP
}
// log_objective_nhmm_multichannel
Rcpp::List log_objective_nhmm_multichannel(arma::mat& eta_pi, const arma::mat& X_pi, arma::cube& eta_A, const arma::cube& X_A, arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::ucube& obs, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B, const arma::uvec& Ti);
RcppExport SEXP _seqHMM_log_objective_nhmm_multichannel(SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP, SEXP TiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Ti(TiSEXP);
    rcpp_result_gen = Rcpp::wrap(log_objective_nhmm_multichannel(eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, iv_pi, iv_A, iv_B, tv_A, tv_B, Ti));
    return rcpp_result_gen;
END_RCPP
}
// log_objective_mnhmm_singlechannel
Rcpp::List log_objective_mnhmm_singlechannel(arma::mat& eta_omega, const arma::mat& X_omega, arma::field<arma::mat>& eta_pi, const arma::mat& X_pi, arma::field<arma::cube>& eta_A, const arma::cube& X_A, arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::umat& obs, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B, const bool iv_omega, const arma::uvec& Ti);
RcppExport SEXP _seqHMM_log_objective_mnhmm_singlechannel(SEXP eta_omegaSEXP, SEXP X_omegaSEXP, SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP, SEXP iv_omegaSEXP, SEXP TiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_omega(eta_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_omega(X_omegaSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_omega(iv_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Ti(TiSEXP);
    rcpp_result_gen = Rcpp::wrap(log_objective_mnhmm_singlechannel(eta_omega, X_omega, eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, iv_pi, iv_A, iv_B, tv_A, tv_B, iv_omega, Ti));
    return rcpp_result_gen;
END_RCPP
}
// log_objective_mnhmm_multichannel
Rcpp::List log_objective_mnhmm_multichannel(arma::mat& eta_omega, const arma::mat& X_omega, arma::field<arma::mat>& eta_pi, const arma::mat& X_pi, arma::field<arma::cube>& eta_A, const arma::cube& X_A, arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::ucube& obs, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B, const bool iv_omega, const arma::uvec& Ti);
RcppExport SEXP _seqHMM_log_objective_mnhmm_multichannel(SEXP eta_omegaSEXP, SEXP X_omegaSEXP, SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP, SEXP iv_omegaSEXP, SEXP TiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_omega(eta_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_omega(X_omegaSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_omega(iv_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Ti(TiSEXP);
    rcpp_result_gen = Rcpp::wrap(log_objective_mnhmm_multichannel(eta_omega, X_omega, eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, iv_pi, iv_A, iv_B, tv_A, tv_B, iv_omega, Ti));
    return rcpp_result_gen;
END_RCPP
}
// simulate_nhmm_singlechannel
Rcpp::List simulate_nhmm_singlechannel(const arma::mat& eta_pi, const arma::mat& X_pi, const arma::cube& eta_A, const arma::cube& X_A, const arma::cube& eta_B, const arma::cube& X_B);
RcppExport SEXP _seqHMM_simulate_nhmm_singlechannel(SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_nhmm_singlechannel(eta_pi, X_pi, eta_A, X_A, eta_B, X_B));
    return rcpp_result_gen;
END_RCPP
}
// simulate_nhmm_multichannel
Rcpp::List simulate_nhmm_multichannel(const arma::mat& eta_pi, const arma::mat& X_pi, const arma::cube& eta_A, const arma::cube& X_A, const arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::uvec& M);
RcppExport SEXP _seqHMM_simulate_nhmm_multichannel(SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_nhmm_multichannel(eta_pi, X_pi, eta_A, X_A, eta_B, X_B, M));
    return rcpp_result_gen;
END_RCPP
}
// simulate_mnhmm_singlechannel
Rcpp::List simulate_mnhmm_singlechannel(const arma::field<arma::mat>& eta_pi, const arma::mat& X_pi, const arma::field<arma::cube>& eta_A, const arma::cube& X_A, const arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::mat& eta_omega, const arma::mat& X_omega);
RcppExport SEXP _seqHMM_simulate_mnhmm_singlechannel(SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP eta_omegaSEXP, SEXP X_omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta_omega(eta_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_omega(X_omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_mnhmm_singlechannel(eta_pi, X_pi, eta_A, X_A, eta_B, X_B, eta_omega, X_omega));
    return rcpp_result_gen;
END_RCPP
}
// simulate_mnhmm_multichannel
Rcpp::List simulate_mnhmm_multichannel(const arma::field<arma::mat>& eta_pi, const arma::mat& X_pi, const arma::field<arma::cube>& eta_A, const arma::cube& X_A, const arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::mat& eta_omega, const arma::mat& X_omega, const arma::uvec& M);
RcppExport SEXP _seqHMM_simulate_mnhmm_multichannel(SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP eta_omegaSEXP, SEXP X_omegaSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta_omega(eta_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_omega(X_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_mnhmm_multichannel(eta_pi, X_pi, eta_A, X_A, eta_B, X_B, eta_omega, X_omega, M));
    return rcpp_result_gen;
END_RCPP
}
// viterbi_nhmm_singlechannel
Rcpp::List viterbi_nhmm_singlechannel(arma::mat& eta_pi, const arma::mat& X_pi, arma::cube& eta_A, const arma::cube& X_A, arma::cube& eta_B, const arma::cube& X_B, const arma::umat& obs, const arma::uvec Ti, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B);
RcppExport SEXP _seqHMM_viterbi_nhmm_singlechannel(SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP TiSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    rcpp_result_gen = Rcpp::wrap(viterbi_nhmm_singlechannel(eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, Ti, iv_pi, iv_A, iv_B, tv_A, tv_B));
    return rcpp_result_gen;
END_RCPP
}
// viterbi_nhmm_multichannel
Rcpp::List viterbi_nhmm_multichannel(arma::mat& eta_pi, const arma::mat& X_pi, arma::cube& eta_A, const arma::cube& X_A, arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::ucube& obs, const arma::uvec Ti, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B);
RcppExport SEXP _seqHMM_viterbi_nhmm_multichannel(SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP TiSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    rcpp_result_gen = Rcpp::wrap(viterbi_nhmm_multichannel(eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, Ti, iv_pi, iv_A, iv_B, tv_A, tv_B));
    return rcpp_result_gen;
END_RCPP
}
// viterbi_mnhmm_singlechannel
Rcpp::List viterbi_mnhmm_singlechannel(arma::mat& eta_omega, const arma::mat& X_omega, arma::field<arma::mat>& eta_pi, const arma::mat& X_pi, arma::field<arma::cube>& eta_A, const arma::cube& X_A, arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::umat& obs, const arma::uvec Ti, const bool iv_omega, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B);
RcppExport SEXP _seqHMM_viterbi_mnhmm_singlechannel(SEXP eta_omegaSEXP, SEXP X_omegaSEXP, SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP TiSEXP, SEXP iv_omegaSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_omega(eta_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_omega(X_omegaSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_omega(iv_omegaSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    rcpp_result_gen = Rcpp::wrap(viterbi_mnhmm_singlechannel(eta_omega, X_omega, eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, Ti, iv_omega, iv_pi, iv_A, iv_B, tv_A, tv_B));
    return rcpp_result_gen;
END_RCPP
}
// viterbi_mnhmm_multichannel
Rcpp::List viterbi_mnhmm_multichannel(arma::mat& eta_omega, const arma::mat& X_omega, arma::field<arma::mat>& eta_pi, const arma::mat& X_pi, arma::field<arma::cube>& eta_A, const arma::cube& X_A, arma::field<arma::cube>& eta_B, const arma::cube& X_B, const arma::ucube& obs, const arma::uvec Ti, const bool iv_omega, const bool iv_pi, const bool iv_A, const bool iv_B, const bool tv_A, const bool tv_B);
RcppExport SEXP _seqHMM_viterbi_mnhmm_multichannel(SEXP eta_omegaSEXP, SEXP X_omegaSEXP, SEXP eta_piSEXP, SEXP X_piSEXP, SEXP eta_ASEXP, SEXP X_ASEXP, SEXP eta_BSEXP, SEXP X_BSEXP, SEXP obsSEXP, SEXP TiSEXP, SEXP iv_omegaSEXP, SEXP iv_piSEXP, SEXP iv_ASEXP, SEXP iv_BSEXP, SEXP tv_ASEXP, SEXP tv_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta_omega(eta_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_omega(X_omegaSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type eta_pi(eta_piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_pi(X_piSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube>& >::type eta_B(eta_BSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_omega(iv_omegaSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_pi(iv_piSEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_A(iv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type iv_B(iv_BSEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_A(tv_ASEXP);
    Rcpp::traits::input_parameter< const bool >::type tv_B(tv_BSEXP);
    rcpp_result_gen = Rcpp::wrap(viterbi_mnhmm_multichannel(eta_omega, X_omega, eta_pi, X_pi, eta_A, X_A, eta_B, X_B, obs, Ti, iv_omega, iv_pi, iv_A, iv_B, tv_A, tv_B));
    return rcpp_result_gen;
END_RCPP
}
// objective
Rcpp::List objective(const arma::mat& transition, const arma::cube& emission, const arma::vec& init, arma::ucube& obs, const arma::umat& ANZ, const arma::ucube& BNZ, const arma::uvec& INZ, const arma::uvec& nSymbols, arma::uword threads);
RcppExport SEXP _seqHMM_objective(SEXP transitionSEXP, SEXP emissionSEXP, SEXP initSEXP, SEXP obsSEXP, SEXP ANZSEXP, SEXP BNZSEXP, SEXP INZSEXP, SEXP nSymbolsSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission(emissionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type ANZ(ANZSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type BNZ(BNZSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type INZ(INZSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(objective(transition, emission, init, obs, ANZ, BNZ, INZ, nSymbols, threads));
    return rcpp_result_gen;
END_RCPP
}
// objectivex
Rcpp::List objectivex(const arma::mat& transition, const arma::cube& emission, const arma::vec& init, const arma::ucube& obs, const arma::umat& ANZ, const arma::ucube& BNZ, const arma::uvec& INZ, const arma::uvec& nSymbols, const arma::mat& coef, const arma::mat& X, arma::uvec& numberOfStates, arma::uword threads);
RcppExport SEXP _seqHMM_objectivex(SEXP transitionSEXP, SEXP emissionSEXP, SEXP initSEXP, SEXP obsSEXP, SEXP ANZSEXP, SEXP BNZSEXP, SEXP INZSEXP, SEXP nSymbolsSEXP, SEXP coefSEXP, SEXP XSEXP, SEXP numberOfStatesSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission(emissionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type ANZ(ANZSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type BNZ(BNZSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type INZ(INZSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(objectivex(transition, emission, init, obs, ANZ, BNZ, INZ, nSymbols, coef, X, numberOfStates, threads));
    return rcpp_result_gen;
END_RCPP
}
// softmax
arma::vec softmax(const arma::vec& x);
RcppExport SEXP _seqHMM_softmax(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(softmax(x));
    return rcpp_result_gen;
END_RCPP
}
// varcoef
Rcpp::NumericMatrix varcoef(const arma::mat& coef, const arma::mat& X);
RcppExport SEXP _seqHMM_varcoef(SEXP coefSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(varcoef(coef, X));
    return rcpp_result_gen;
END_RCPP
}
// viterbi
Rcpp::List viterbi(const arma::mat& transition, const arma::cube& emission, const arma::vec& init, const arma::ucube& obs);
RcppExport SEXP _seqHMM_viterbi(SEXP transitionSEXP, SEXP emissionSEXP, SEXP initSEXP, SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission(emissionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(viterbi(transition, emission, init, obs));
    return rcpp_result_gen;
END_RCPP
}
// viterbix
Rcpp::List viterbix(const arma::mat& transition, const arma::cube& emission, const arma::vec& init, const arma::ucube& obs, const arma::mat& coef, const arma::mat& X, const arma::uvec& numberOfStates);
RcppExport SEXP _seqHMM_viterbix(SEXP transitionSEXP, SEXP emissionSEXP, SEXP initSEXP, SEXP obsSEXP, SEXP coefSEXP, SEXP XSEXP, SEXP numberOfStatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type emission(emissionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type numberOfStates(numberOfStatesSEXP);
    rcpp_result_gen = Rcpp::wrap(viterbix(transition, emission, init, obs, coef, X, numberOfStates));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_seqHMM_EM", (DL_FUNC) &_seqHMM_EM, 9},
    {"_seqHMM_EMx", (DL_FUNC) &_seqHMM_EMx, 12},
    {"_seqHMM_cost_matrix_singlechannel", (DL_FUNC) &_seqHMM_cost_matrix_singlechannel, 6},
    {"_seqHMM_cost_matrix_multichannel", (DL_FUNC) &_seqHMM_cost_matrix_multichannel, 6},
    {"_seqHMM_cost_matrix_clusters", (DL_FUNC) &_seqHMM_cost_matrix_clusters, 2},
    {"_seqHMM_create_Q", (DL_FUNC) &_seqHMM_create_Q, 1},
    {"_seqHMM_eta_to_gamma_mat", (DL_FUNC) &_seqHMM_eta_to_gamma_mat, 1},
    {"_seqHMM_eta_to_gamma_cube", (DL_FUNC) &_seqHMM_eta_to_gamma_cube, 1},
    {"_seqHMM_eta_to_gamma_mat_field", (DL_FUNC) &_seqHMM_eta_to_gamma_mat_field, 1},
    {"_seqHMM_eta_to_gamma_cube_field", (DL_FUNC) &_seqHMM_eta_to_gamma_cube_field, 1},
    {"_seqHMM_fast_quantiles", (DL_FUNC) &_seqHMM_fast_quantiles, 2},
    {"_seqHMM_forwardbackward", (DL_FUNC) &_seqHMM_forwardbackward, 6},
    {"_seqHMM_forwardbackwardx", (DL_FUNC) &_seqHMM_forwardbackwardx, 9},
    {"_seqHMM_get_omega", (DL_FUNC) &_seqHMM_get_omega, 2},
    {"_seqHMM_get_log_omega", (DL_FUNC) &_seqHMM_get_log_omega, 2},
    {"_seqHMM_get_omega_all", (DL_FUNC) &_seqHMM_get_omega_all, 2},
    {"_seqHMM_get_pi", (DL_FUNC) &_seqHMM_get_pi, 2},
    {"_seqHMM_get_log_pi", (DL_FUNC) &_seqHMM_get_log_pi, 2},
    {"_seqHMM_get_A", (DL_FUNC) &_seqHMM_get_A, 3},
    {"_seqHMM_get_log_A", (DL_FUNC) &_seqHMM_get_log_A, 3},
    {"_seqHMM_get_B", (DL_FUNC) &_seqHMM_get_B, 4},
    {"_seqHMM_get_log_B", (DL_FUNC) &_seqHMM_get_log_B, 4},
    {"_seqHMM_get_pi_all", (DL_FUNC) &_seqHMM_get_pi_all, 2},
    {"_seqHMM_get_A_all", (DL_FUNC) &_seqHMM_get_A_all, 3},
    {"_seqHMM_get_B_all", (DL_FUNC) &_seqHMM_get_B_all, 3},
    {"_seqHMM_get_pi_qs", (DL_FUNC) &_seqHMM_get_pi_qs, 3},
    {"_seqHMM_get_A_qs", (DL_FUNC) &_seqHMM_get_A_qs, 4},
    {"_seqHMM_get_B_qs", (DL_FUNC) &_seqHMM_get_B_qs, 4},
    {"_seqHMM_get_omega_qs", (DL_FUNC) &_seqHMM_get_omega_qs, 3},
    {"_seqHMM_get_pi_ame", (DL_FUNC) &_seqHMM_get_pi_ame, 4},
    {"_seqHMM_get_A_ame", (DL_FUNC) &_seqHMM_get_A_ame, 5},
    {"_seqHMM_get_B_ame", (DL_FUNC) &_seqHMM_get_B_ame, 5},
    {"_seqHMM_get_omega_ame", (DL_FUNC) &_seqHMM_get_omega_ame, 4},
    {"_seqHMM_logLikHMM", (DL_FUNC) &_seqHMM_logLikHMM, 5},
    {"_seqHMM_logLikMixHMM", (DL_FUNC) &_seqHMM_logLikMixHMM, 8},
    {"_seqHMM_logSumExp", (DL_FUNC) &_seqHMM_logSumExp, 1},
    {"_seqHMM_log_EM", (DL_FUNC) &_seqHMM_log_EM, 9},
    {"_seqHMM_log_EMx", (DL_FUNC) &_seqHMM_log_EMx, 12},
    {"_seqHMM_log_forwardbackward", (DL_FUNC) &_seqHMM_log_forwardbackward, 6},
    {"_seqHMM_log_forwardbackwardx", (DL_FUNC) &_seqHMM_log_forwardbackwardx, 9},
    {"_seqHMM_log_logLikHMM", (DL_FUNC) &_seqHMM_log_logLikHMM, 5},
    {"_seqHMM_log_logLikMixHMM", (DL_FUNC) &_seqHMM_log_logLikMixHMM, 8},
    {"_seqHMM_log_objective", (DL_FUNC) &_seqHMM_log_objective, 9},
    {"_seqHMM_log_objectivex", (DL_FUNC) &_seqHMM_log_objectivex, 12},
    {"_seqHMM_EM_LBFGS_nhmm_singlechannel", (DL_FUNC) &_seqHMM_EM_LBFGS_nhmm_singlechannel, 27},
    {"_seqHMM_EM_LBFGS_nhmm_multichannel", (DL_FUNC) &_seqHMM_EM_LBFGS_nhmm_multichannel, 27},
    {"_seqHMM_backward_nhmm_singlechannel", (DL_FUNC) &_seqHMM_backward_nhmm_singlechannel, 13},
    {"_seqHMM_backward_nhmm_multichannel", (DL_FUNC) &_seqHMM_backward_nhmm_multichannel, 13},
    {"_seqHMM_backward_mnhmm_singlechannel", (DL_FUNC) &_seqHMM_backward_mnhmm_singlechannel, 16},
    {"_seqHMM_backward_mnhmm_multichannel", (DL_FUNC) &_seqHMM_backward_mnhmm_multichannel, 16},
    {"_seqHMM_forward_nhmm_singlechannel", (DL_FUNC) &_seqHMM_forward_nhmm_singlechannel, 13},
    {"_seqHMM_forward_nhmm_multichannel", (DL_FUNC) &_seqHMM_forward_nhmm_multichannel, 13},
    {"_seqHMM_forward_mnhmm_singlechannel", (DL_FUNC) &_seqHMM_forward_mnhmm_singlechannel, 16},
    {"_seqHMM_forward_mnhmm_multichannel", (DL_FUNC) &_seqHMM_forward_mnhmm_multichannel, 16},
    {"_seqHMM_log_objective_nhmm_singlechannel", (DL_FUNC) &_seqHMM_log_objective_nhmm_singlechannel, 13},
    {"_seqHMM_log_objective_nhmm_multichannel", (DL_FUNC) &_seqHMM_log_objective_nhmm_multichannel, 13},
    {"_seqHMM_log_objective_mnhmm_singlechannel", (DL_FUNC) &_seqHMM_log_objective_mnhmm_singlechannel, 16},
    {"_seqHMM_log_objective_mnhmm_multichannel", (DL_FUNC) &_seqHMM_log_objective_mnhmm_multichannel, 16},
    {"_seqHMM_simulate_nhmm_singlechannel", (DL_FUNC) &_seqHMM_simulate_nhmm_singlechannel, 6},
    {"_seqHMM_simulate_nhmm_multichannel", (DL_FUNC) &_seqHMM_simulate_nhmm_multichannel, 7},
    {"_seqHMM_simulate_mnhmm_singlechannel", (DL_FUNC) &_seqHMM_simulate_mnhmm_singlechannel, 8},
    {"_seqHMM_simulate_mnhmm_multichannel", (DL_FUNC) &_seqHMM_simulate_mnhmm_multichannel, 9},
    {"_seqHMM_viterbi_nhmm_singlechannel", (DL_FUNC) &_seqHMM_viterbi_nhmm_singlechannel, 13},
    {"_seqHMM_viterbi_nhmm_multichannel", (DL_FUNC) &_seqHMM_viterbi_nhmm_multichannel, 13},
    {"_seqHMM_viterbi_mnhmm_singlechannel", (DL_FUNC) &_seqHMM_viterbi_mnhmm_singlechannel, 16},
    {"_seqHMM_viterbi_mnhmm_multichannel", (DL_FUNC) &_seqHMM_viterbi_mnhmm_multichannel, 16},
    {"_seqHMM_objective", (DL_FUNC) &_seqHMM_objective, 9},
    {"_seqHMM_objectivex", (DL_FUNC) &_seqHMM_objectivex, 12},
    {"_seqHMM_softmax", (DL_FUNC) &_seqHMM_softmax, 1},
    {"_seqHMM_varcoef", (DL_FUNC) &_seqHMM_varcoef, 2},
    {"_seqHMM_viterbi", (DL_FUNC) &_seqHMM_viterbi, 4},
    {"_seqHMM_viterbix", (DL_FUNC) &_seqHMM_viterbix, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_seqHMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
