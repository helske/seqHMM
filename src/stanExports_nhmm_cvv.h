// Generated by rstantools.  Do not edit by hand.

/*
    seqHMM is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    seqHMM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with seqHMM.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_nhmm_cvv_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 118> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 53, column 0 to column 14)",
  " (in 'string', line 56, column 0 to column 39)",
  " (in 'string', line 59, column 0 to column 39)",
  " (in 'string', line 62, column 2 to column 16)",
  " (in 'string', line 63, column 2 to column 20)",
  " (in 'string', line 65, column 0 to column 31)",
  " (in 'string', line 70, column 0 to column 31)",
  " (in 'string', line 122, column 2 to column 22)",
  " (in 'string', line 123, column 2 to column 26)",
  " (in 'string', line 67, column 2 to column 64)",
  " (in 'string', line 66, column 14 to line 68, column 1)",
  " (in 'string', line 66, column 0 to line 68, column 1)",
  " (in 'string', line 72, column 2 to column 64)",
  " (in 'string', line 71, column 14 to line 73, column 1)",
  " (in 'string', line 71, column 0 to line 73, column 1)",
  " (in 'string', line 76, column 0 to column 48)",
  " (in 'string', line 80, column 2 to column 57)",
  " (in 'string', line 79, column 14 to line 81, column 1)",
  " (in 'string', line 79, column 0 to line 81, column 1)",
  " (in 'string', line 85, column 2 to column 57)",
  " (in 'string', line 84, column 14 to line 86, column 1)",
  " (in 'string', line 84, column 0 to line 86, column 1)",
  " (in 'string', line 89, column 11 to column 12)",
  " (in 'string', line 89, column 4 to column 17)",
  " (in 'string', line 90, column 11 to column 12)",
  " (in 'string', line 90, column 4 to column 21)",
  " (in 'string', line 91, column 11 to column 12)",
  " (in 'string', line 91, column 14 to column 15)",
  " (in 'string', line 91, column 4 to column 23)",
  " (in 'string', line 92, column 11 to column 12)",
  " (in 'string', line 92, column 14 to column 15)",
  " (in 'string', line 92, column 4 to column 24)",
  " (in 'string', line 93, column 10 to column 11)",
  " (in 'string', line 93, column 20 to column 21)",
  " (in 'string', line 93, column 23 to column 24)",
  " (in 'string', line 93, column 4 to column 32)",
  " (in 'string', line 95, column 0 to column 17)",
  " (in 'string', line 100, column 2 to column 54)",
  " (in 'string', line 99, column 14 to line 101, column 1)",
  " (in 'string', line 99, column 0 to line 101, column 1)",
  " (in 'string', line 104, column 2 to column 51)",
  " (in 'string', line 103, column 14 to line 105, column 1)",
  " (in 'string', line 103, column 0 to line 105, column 1)",
  " (in 'string', line 109, column 10 to column 43)",
  " (in 'string', line 108, column 15 to line 110, column 9)",
  " (in 'string', line 107, column 10 to column 41)",
  " (in 'string', line 106, column 28 to line 108, column 9)",
  " (in 'string', line 106, column 8 to line 110, column 9)",
  " (in 'string', line 97, column 20 to line 111, column 7)",
  " (in 'string', line 97, column 6 to line 111, column 7)",
  " (in 'string', line 112, column 6 to column 44)",
  " (in 'string', line 96, column 18 to line 113, column 5)",
  " (in 'string', line 96, column 4 to line 113, column 5)",
  " (in 'string', line 114, column 4 to column 23)",
  " (in 'string', line 88, column 2 to line 115, column 3)",
  " (in 'string', line 118, column 2 to column 19)",
  " (in 'string', line 119, column 2 to column 21)",
  " (in 'string', line 38, column 0 to column 17)",
  " (in 'string', line 39, column 0 to column 17)",
  " (in 'string', line 40, column 0 to column 17)",
  " (in 'string', line 41, column 0 to column 17)",
  " (in 'string', line 42, column 6 to column 7)",
  " (in 'string', line 42, column 9 to column 10)",
  " (in 'string', line 42, column 0 to column 38)",
  " (in 'string', line 44, column 0 to column 17)",
  " (in 'string', line 45, column 6 to column 7)",
  " (in 'string', line 45, column 9 to column 10)",
  " (in 'string', line 45, column 19 to column 22)",
  " (in 'string', line 45, column 0 to column 28)",
  " (in 'string', line 47, column 0 to column 17)",
  " (in 'string', line 48, column 6 to column 7)",
  " (in 'string', line 48, column 9 to column 10)",
  " (in 'string', line 48, column 19 to column 22)",
  " (in 'string', line 48, column 0 to column 28)",
  " (in 'string', line 53, column 8 to column 9)",
  " (in 'string', line 56, column 6 to column 7)",
  " (in 'string', line 56, column 16 to column 21)",
  " (in 'string', line 56, column 23 to column 26)",
  " (in 'string', line 59, column 6 to column 7)",
  " (in 'string', line 59, column 16 to column 21)",
  " (in 'string', line 59, column 23 to column 26)",
  " (in 'string', line 65, column 6 to column 7)",
  " (in 'string', line 65, column 16 to column 17)",
  " (in 'string', line 65, column 19 to column 22)",
  " (in 'string', line 70, column 6 to column 7)",
  " (in 'string', line 70, column 16 to column 17)",
  " (in 'string', line 70, column 19 to column 22)",
  " (in 'string', line 7, column 2 to column 23)",
  " (in 'string', line 8, column 2 to column 23)",
  " (in 'string', line 9, column 9 to column 10)",
  " (in 'string', line 9, column 2 to column 22)",
  " (in 'string', line 10, column 9 to column 10)",
  " (in 'string', line 10, column 2 to column 26)",
  " (in 'string', line 11, column 2 to column 35)",
  " (in 'string', line 14, column 6 to column 79)",
  " (in 'string', line 13, column 19 to line 15, column 5)",
  " (in 'string', line 13, column 4 to line 15, column 5)",
  " (in 'string', line 16, column 4 to column 30)",
  " (in 'string', line 12, column 17 to line 17, column 3)",
  " (in 'string', line 12, column 2 to line 17, column 3)",
  " (in 'string', line 18, column 2 to column 32)",
  " (in 'string', line 6, column 64 to line 19, column 1)",
  " (in 'string', line 22, column 2 to column 23)",
  " (in 'string', line 23, column 2 to column 23)",
  " (in 'string', line 24, column 9 to column 10)",
  " (in 'string', line 24, column 2 to column 22)",
  " (in 'string', line 25, column 9 to column 10)",
  " (in 'string', line 25, column 2 to column 26)",
  " (in 'string', line 26, column 2 to column 35)",
  " (in 'string', line 29, column 6 to column 76)",
  " (in 'string', line 28, column 19 to line 30, column 5)",
  " (in 'string', line 28, column 4 to line 30, column 5)",
  " (in 'string', line 31, column 4 to column 30)",
  " (in 'string', line 27, column 17 to line 32, column 3)",
  " (in 'string', line 27, column 2 to line 32, column 3)",
  " (in 'string', line 33, column 2 to column 32)",
  " (in 'string', line 21, column 56 to line 34, column 1)"};
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>>
loglik(const T0__& log_Pi_arg__,
       const std::vector<Eigen::Matrix<T1__,-1,-1>>& log_A, const T2__&
       log_py_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>>
loglik(const T0__& log_Pi_arg__, const T1__& log_A_arg__, const T2__&
       log_py_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>>
loglik(const T0__& log_Pi_arg__,
       const std::vector<Eigen::Matrix<T1__,-1,-1>>& log_A, const T2__&
       log_py_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& log_Pi = stan::math::to_ref(log_Pi_arg__);
  const auto& log_py = stan::math::to_ref(log_py_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int S = std::numeric_limits<int>::min();
    current_statement__ = 88;
    S = stan::math::rows(log_py);
    int T = std::numeric_limits<int>::min();
    current_statement__ = 89;
    T = stan::math::cols(log_py);
    current_statement__ = 90;
    stan::math::validate_non_negative_index("log_alpha", "S", S);
    Eigen::Matrix<local_scalar_t__,-1,1> log_alpha =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
    current_statement__ = 92;
    stan::math::validate_non_negative_index("log_alpha_new", "S", S);
    Eigen::Matrix<local_scalar_t__,-1,1> log_alpha_new =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
    current_statement__ = 94;
    stan::model::assign(log_alpha,
      stan::math::add(log_Pi,
        stan::model::rvalue(log_py, "log_py", stan::model::index_omni(),
          stan::model::index_uni(1))), "assigning variable log_alpha");
    current_statement__ = 100;
    for (int t = 2; t <= T; ++t) {
      current_statement__ = 97;
      for (int k = 1; k <= S; ++k) {
        current_statement__ = 95;
        stan::model::assign(log_alpha_new,
          stan::math::log_sum_exp(
            stan::math::add(
              stan::math::add(log_alpha,
                stan::model::rvalue(log_A, "log_A",
                  stan::model::index_uni(t), stan::model::index_omni(),
                  stan::model::index_uni(k))),
              stan::model::rvalue(log_py, "log_py",
                stan::model::index_uni(k), stan::model::index_uni(t)))),
          "assigning variable log_alpha_new", stan::model::index_uni(k));
      }
      current_statement__ = 98;
      stan::model::assign(log_alpha, log_alpha_new,
        "assigning variable log_alpha");
    }
    current_statement__ = 101;
    return stan::math::log_sum_exp(log_alpha);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>>
loglik(const T0__& log_Pi_arg__, const T1__& log_A_arg__, const T2__&
       log_py_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& log_Pi = stan::math::to_ref(log_Pi_arg__);
  const auto& log_A = stan::math::to_ref(log_A_arg__);
  const auto& log_py = stan::math::to_ref(log_py_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int S = std::numeric_limits<int>::min();
    current_statement__ = 103;
    S = stan::math::rows(log_py);
    int T = std::numeric_limits<int>::min();
    current_statement__ = 104;
    T = stan::math::cols(log_py);
    current_statement__ = 105;
    stan::math::validate_non_negative_index("log_alpha", "S", S);
    Eigen::Matrix<local_scalar_t__,-1,1> log_alpha =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
    current_statement__ = 107;
    stan::math::validate_non_negative_index("log_alpha_new", "S", S);
    Eigen::Matrix<local_scalar_t__,-1,1> log_alpha_new =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
    current_statement__ = 109;
    stan::model::assign(log_alpha,
      stan::math::add(log_Pi,
        stan::model::rvalue(log_py, "log_py", stan::model::index_omni(),
          stan::model::index_uni(1))), "assigning variable log_alpha");
    current_statement__ = 115;
    for (int t = 2; t <= T; ++t) {
      current_statement__ = 112;
      for (int k = 1; k <= S; ++k) {
        current_statement__ = 110;
        stan::model::assign(log_alpha_new,
          stan::math::log_sum_exp(
            stan::math::add(
              stan::math::add(log_alpha,
                stan::model::rvalue(log_A, "log_A",
                  stan::model::index_omni(), stan::model::index_uni(k))),
              stan::model::rvalue(log_py, "log_py",
                stan::model::index_uni(k), stan::model::index_uni(t)))),
          "assigning variable log_alpha_new", stan::model::index_uni(k));
      }
      current_statement__ = 113;
      stan::model::assign(log_alpha, log_alpha_new,
        "assigning variable log_alpha");
    }
    current_statement__ = 116;
    return stan::math::log_sum_exp(log_alpha);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_nhmm_cvv final : public model_base_crtp<model_nhmm_cvv> {
private:
  int N;
  int T;
  int M;
  int S;
  std::vector<std::vector<int>> obs;
  int K_s;
  std::vector<std::vector<Eigen::Matrix<double,-1,1>>> X_s;
  int K_o;
  std::vector<std::vector<Eigen::Matrix<double,-1,1>>> X_o;
  int beta_s_raw_2dim__;
  int beta_o_raw_2dim__;
public:
  ~model_nhmm_cvv() {}
  model_nhmm_cvv(stan::io::var_context& context__, unsigned int
                 random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_nhmm_cvv_namespace::model_nhmm_cvv";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 58;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 58;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "T", "int",
        std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      current_statement__ = 59;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 60;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 60;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 60;
      stan::math::check_greater_or_equal(function__, "M", M, 2);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "S", "int",
        std::vector<size_t>{});
      S = std::numeric_limits<int>::min();
      current_statement__ = 61;
      S = context__.vals_i("S")[(1 - 1)];
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "S", S, 1);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("obs", "T", T);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("obs", "N", N);
      current_statement__ = 64;
      context__.validate_dims("data initialization", "obs", "int",
        std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(N)});
      obs = std::vector<std::vector<int>>(T,
              std::vector<int>(N, std::numeric_limits<int>::min()));
      {
        std::vector<int> obs_flat__;
        current_statement__ = 64;
        obs_flat__ = context__.vals_i("obs");
        current_statement__ = 64;
        pos__ = 1;
        current_statement__ = 64;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 64;
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            current_statement__ = 64;
            stan::model::assign(obs, obs_flat__[(pos__ - 1)],
              "assigning variable obs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 64;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 64;
      stan::math::check_greater_or_equal(function__, "obs", obs, 0);
      current_statement__ = 64;
      stan::math::check_less_or_equal(function__, "obs", obs, M);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "K_s", "int",
        std::vector<size_t>{});
      K_s = std::numeric_limits<int>::min();
      current_statement__ = 65;
      K_s = context__.vals_i("K_s")[(1 - 1)];
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "K_s", K_s, 1);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("X_s", "T", T);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("X_s", "N", N);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("X_s", "K_s", K_s);
      current_statement__ = 69;
      context__.validate_dims("data initialization", "X_s", "double",
        std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(N),
          static_cast<size_t>(K_s)});
      X_s = std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(T,
              std::vector<Eigen::Matrix<double,-1,1>>(N,
                Eigen::Matrix<double,-1,1>::Constant(K_s,
                  std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> X_s_flat__;
        current_statement__ = 69;
        X_s_flat__ = context__.vals_r("X_s");
        current_statement__ = 69;
        pos__ = 1;
        current_statement__ = 69;
        for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
          current_statement__ = 69;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 69;
            for (int sym3__ = 1; sym3__ <= T; ++sym3__) {
              current_statement__ = 69;
              stan::model::assign(X_s, X_s_flat__[(pos__ - 1)],
                "assigning variable X_s", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 69;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 70;
      context__.validate_dims("data initialization", "K_o", "int",
        std::vector<size_t>{});
      K_o = std::numeric_limits<int>::min();
      current_statement__ = 70;
      K_o = context__.vals_i("K_o")[(1 - 1)];
      current_statement__ = 70;
      stan::math::check_greater_or_equal(function__, "K_o", K_o, 1);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("X_o", "T", T);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("X_o", "N", N);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("X_o", "K_o", K_o);
      current_statement__ = 74;
      context__.validate_dims("data initialization", "X_o", "double",
        std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(N),
          static_cast<size_t>(K_o)});
      X_o = std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(T,
              std::vector<Eigen::Matrix<double,-1,1>>(N,
                Eigen::Matrix<double,-1,1>::Constant(K_o,
                  std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> X_o_flat__;
        current_statement__ = 74;
        X_o_flat__ = context__.vals_r("X_o");
        current_statement__ = 74;
        pos__ = 1;
        current_statement__ = 74;
        for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
          current_statement__ = 74;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 74;
            for (int sym3__ = 1; sym3__ <= T; ++sym3__) {
              current_statement__ = 74;
              stan::model::assign(X_o, X_o_flat__[(pos__ - 1)],
                "assigning variable X_o", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 74;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 75;
      stan::math::validate_positive_index("Pi", "S", S);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("beta_s_raw", "S", S);
      current_statement__ = 77;
      beta_s_raw_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 77;
      beta_s_raw_2dim__ = (S - 1);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("beta_s_raw", "S - 1",
        beta_s_raw_2dim__);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("beta_s_raw", "K_s", K_s);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("beta_o_raw", "S", S);
      current_statement__ = 80;
      beta_o_raw_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 80;
      beta_o_raw_2dim__ = (M - 1);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("beta_o_raw", "M - 1",
        beta_o_raw_2dim__);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("beta_o_raw", "K_o", K_o);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("beta_s", "S", S);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("beta_s", "S", S);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("beta_s", "K_s", K_s);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("beta_o", "S", S);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("beta_o", "M", M);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("beta_o", "K_o", K_o);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (S - 1) + (S * beta_s_raw_2dim__ * K_s) + (S *
      beta_o_raw_2dim__ * K_o);
  }
  inline std::string model_name() const final {
    return "model_nhmm_cvv";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_nhmm_cvv_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> Pi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
      current_statement__ = 1;
      Pi = in__.template read_constrain_simplex<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, S);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> beta_s_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_s_raw_2dim__,
            K_s, DUMMY_VAR__));
      current_statement__ = 2;
      beta_s_raw = in__.template read<
                     std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(S,
                     beta_s_raw_2dim__, K_s);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> beta_o_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_o_raw_2dim__,
            K_o, DUMMY_VAR__));
      current_statement__ = 3;
      beta_o_raw = in__.template read<
                     std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(S,
                     beta_o_raw_2dim__, K_o);
      local_scalar_t__ log_lik_ = DUMMY_VAR__;
      local_scalar_t__ prior_ = DUMMY_VAR__;
      current_statement__ = 5;
      prior_ = 0.0;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> beta_s =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(S, K_s,
            DUMMY_VAR__));
      current_statement__ = 12;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 10;
        stan::model::assign(beta_s,
          stan::math::append_row(stan::math::rep_row_vector(0, K_s),
            stan::model::rvalue(beta_s_raw, "beta_s_raw",
              stan::model::index_uni(s))), "assigning variable beta_s",
          stan::model::index_uni(s));
      }
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> beta_o =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(M, K_o,
            DUMMY_VAR__));
      current_statement__ = 15;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 13;
        stan::model::assign(beta_o,
          stan::math::append_row(stan::math::rep_row_vector(0, K_o),
            stan::model::rvalue(beta_o_raw, "beta_o_raw",
              stan::model::index_uni(s))), "assigning variable beta_o",
          stan::model::index_uni(s));
      }
      current_statement__ = 16;
      prior_ = (prior_ +
        stan::math::dirichlet_lpdf<false>(Pi, stan::math::rep_vector(2, S)));
      current_statement__ = 19;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 17;
        prior_ = (prior_ +
          stan::math::normal_lpdf<false>(
            stan::math::to_vector(
              stan::model::rvalue(beta_s_raw, "beta_s_raw",
                stan::model::index_uni(s))), 0, 5));
      }
      current_statement__ = 22;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 20;
        prior_ = (prior_ +
          stan::math::normal_lpdf<false>(
            stan::math::to_vector(
              stan::model::rvalue(beta_o_raw, "beta_o_raw",
                stan::model::index_uni(s))), 0, 5));
      }
      {
        current_statement__ = 23;
        stan::math::validate_non_negative_index("ll", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> ll =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 25;
        stan::math::validate_non_negative_index("log_Pi", "S", S);
        Eigen::Matrix<local_scalar_t__,-1,1> log_Pi =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
        current_statement__ = 27;
        stan::math::validate_non_negative_index("log_B", "S", S);
        current_statement__ = 28;
        stan::math::validate_non_negative_index("log_B", "M", M);
        Eigen::Matrix<local_scalar_t__,-1,-1> log_B =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(S, M, DUMMY_VAR__);
        current_statement__ = 30;
        stan::math::validate_non_negative_index("log_py", "S", S);
        current_statement__ = 31;
        stan::math::validate_non_negative_index("log_py", "T", T);
        Eigen::Matrix<local_scalar_t__,-1,-1> log_py =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(S, T, DUMMY_VAR__);
        current_statement__ = 33;
        stan::math::validate_non_negative_index("log_A", "T", T);
        current_statement__ = 34;
        stan::math::validate_non_negative_index("log_A", "S", S);
        current_statement__ = 35;
        stan::math::validate_non_negative_index("log_A", "S", S);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> log_A =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(T,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(S, S,
              DUMMY_VAR__));
        current_statement__ = 37;
        stan::model::assign(log_Pi, stan::math::log(Pi),
          "assigning variable log_Pi");
        current_statement__ = 53;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 50;
          for (int t = 1; t <= T; ++t) {
            current_statement__ = 40;
            for (int s = 1; s <= S; ++s) {
              current_statement__ = 38;
              stan::model::assign(log_A,
                stan::math::transpose(
                  stan::math::log_softmax(
                    stan::math::multiply(
                      stan::model::rvalue(beta_s, "beta_s",
                        stan::model::index_uni(s)),
                      stan::model::rvalue(X_s, "X_s",
                        stan::model::index_uni(t), stan::model::index_uni(i))))),
                "assigning variable log_A", stan::model::index_uni(t),
                stan::model::index_uni(s), stan::model::index_omni());
            }
            current_statement__ = 43;
            for (int s = 1; s <= S; ++s) {
              current_statement__ = 41;
              stan::model::assign(log_B,
                stan::math::transpose(
                  stan::math::log_softmax(
                    stan::math::multiply(
                      stan::model::rvalue(beta_o, "beta_o",
                        stan::model::index_uni(s)),
                      stan::model::rvalue(X_o, "X_o",
                        stan::model::index_uni(t), stan::model::index_uni(i))))),
                "assigning variable log_B", stan::model::index_uni(s),
                stan::model::index_omni());
            }
            current_statement__ = 48;
            if (stan::math::logical_eq(
                  stan::model::rvalue(obs, "obs", stan::model::index_uni(t),
                    stan::model::index_uni(i)), 0)) {
              current_statement__ = 46;
              stan::model::assign(log_py, stan::math::rep_vector(0, S),
                "assigning variable log_py", stan::model::index_omni(),
                stan::model::index_uni(t));
            } else {
              current_statement__ = 44;
              stan::model::assign(log_py,
                stan::model::rvalue(log_B, "log_B",
                  stan::model::index_omni(),
                  stan::model::index_uni(
                    stan::model::rvalue(obs, "obs",
                      stan::model::index_uni(t), stan::model::index_uni(i)))),
                "assigning variable log_py", stan::model::index_omni(),
                stan::model::index_uni(t));
            }
          }
          current_statement__ = 51;
          stan::model::assign(ll, loglik(log_Pi, log_A, log_py, pstream__),
            "assigning variable ll", stan::model::index_uni(i));
        }
        current_statement__ = 54;
        log_lik_ = stan::math::sum(ll);
      }
      {
        current_statement__ = 56;
        lp_accum__.add(prior_);
        current_statement__ = 57;
        lp_accum__.add(log_lik_);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_nhmm_cvv_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> Pi =
        Eigen::Matrix<double,-1,1>::Constant(S,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      Pi = in__.template read_constrain_simplex<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, S);
      std::vector<Eigen::Matrix<double,-1,-1>> beta_s_raw =
        std::vector<Eigen::Matrix<double,-1,-1>>(S,
          Eigen::Matrix<double,-1,-1>::Constant(beta_s_raw_2dim__, K_s,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 2;
      beta_s_raw = in__.template read<
                     std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(S,
                     beta_s_raw_2dim__, K_s);
      std::vector<Eigen::Matrix<double,-1,-1>> beta_o_raw =
        std::vector<Eigen::Matrix<double,-1,-1>>(S,
          Eigen::Matrix<double,-1,-1>::Constant(beta_o_raw_2dim__, K_o,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 3;
      beta_o_raw = in__.template read<
                     std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(S,
                     beta_o_raw_2dim__, K_o);
      double log_lik_ = std::numeric_limits<double>::quiet_NaN();
      double prior_ = std::numeric_limits<double>::quiet_NaN();
      std::vector<Eigen::Matrix<double,-1,-1>> beta_s =
        std::vector<Eigen::Matrix<double,-1,-1>>(S,
          Eigen::Matrix<double,-1,-1>::Constant(S, K_s,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,-1>> beta_o =
        std::vector<Eigen::Matrix<double,-1,-1>>(S,
          Eigen::Matrix<double,-1,-1>::Constant(M, K_o,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(Pi);
      for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= beta_s_raw_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            out__.write(stan::model::rvalue(beta_s_raw, "beta_s_raw",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= beta_o_raw_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            out__.write(stan::model::rvalue(beta_o_raw, "beta_o_raw",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 5;
      prior_ = 0.0;
      current_statement__ = 12;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 10;
        stan::model::assign(beta_s,
          stan::math::append_row(stan::math::rep_row_vector(0, K_s),
            stan::model::rvalue(beta_s_raw, "beta_s_raw",
              stan::model::index_uni(s))), "assigning variable beta_s",
          stan::model::index_uni(s));
      }
      current_statement__ = 15;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 13;
        stan::model::assign(beta_o,
          stan::math::append_row(stan::math::rep_row_vector(0, K_o),
            stan::model::rvalue(beta_o_raw, "beta_o_raw",
              stan::model::index_uni(s))), "assigning variable beta_o",
          stan::model::index_uni(s));
      }
      current_statement__ = 16;
      prior_ = (prior_ +
        stan::math::dirichlet_lpdf<false>(Pi, stan::math::rep_vector(2, S)));
      current_statement__ = 19;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 17;
        prior_ = (prior_ +
          stan::math::normal_lpdf<false>(
            stan::math::to_vector(
              stan::model::rvalue(beta_s_raw, "beta_s_raw",
                stan::model::index_uni(s))), 0, 5));
      }
      current_statement__ = 22;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 20;
        prior_ = (prior_ +
          stan::math::normal_lpdf<false>(
            stan::math::to_vector(
              stan::model::rvalue(beta_o_raw, "beta_o_raw",
                stan::model::index_uni(s))), 0, 5));
      }
      {
        current_statement__ = 23;
        stan::math::validate_non_negative_index("ll", "N", N);
        Eigen::Matrix<double,-1,1> ll =
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 25;
        stan::math::validate_non_negative_index("log_Pi", "S", S);
        Eigen::Matrix<double,-1,1> log_Pi =
          Eigen::Matrix<double,-1,1>::Constant(S,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 27;
        stan::math::validate_non_negative_index("log_B", "S", S);
        current_statement__ = 28;
        stan::math::validate_non_negative_index("log_B", "M", M);
        Eigen::Matrix<double,-1,-1> log_B =
          Eigen::Matrix<double,-1,-1>::Constant(S, M,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 30;
        stan::math::validate_non_negative_index("log_py", "S", S);
        current_statement__ = 31;
        stan::math::validate_non_negative_index("log_py", "T", T);
        Eigen::Matrix<double,-1,-1> log_py =
          Eigen::Matrix<double,-1,-1>::Constant(S, T,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 33;
        stan::math::validate_non_negative_index("log_A", "T", T);
        current_statement__ = 34;
        stan::math::validate_non_negative_index("log_A", "S", S);
        current_statement__ = 35;
        stan::math::validate_non_negative_index("log_A", "S", S);
        std::vector<Eigen::Matrix<double,-1,-1>> log_A =
          std::vector<Eigen::Matrix<double,-1,-1>>(T,
            Eigen::Matrix<double,-1,-1>::Constant(S, S,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 37;
        stan::model::assign(log_Pi, stan::math::log(Pi),
          "assigning variable log_Pi");
        current_statement__ = 53;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 50;
          for (int t = 1; t <= T; ++t) {
            current_statement__ = 40;
            for (int s = 1; s <= S; ++s) {
              current_statement__ = 38;
              stan::model::assign(log_A,
                stan::math::transpose(
                  stan::math::log_softmax(
                    stan::math::multiply(
                      stan::model::rvalue(beta_s, "beta_s",
                        stan::model::index_uni(s)),
                      stan::model::rvalue(X_s, "X_s",
                        stan::model::index_uni(t), stan::model::index_uni(i))))),
                "assigning variable log_A", stan::model::index_uni(t),
                stan::model::index_uni(s), stan::model::index_omni());
            }
            current_statement__ = 43;
            for (int s = 1; s <= S; ++s) {
              current_statement__ = 41;
              stan::model::assign(log_B,
                stan::math::transpose(
                  stan::math::log_softmax(
                    stan::math::multiply(
                      stan::model::rvalue(beta_o, "beta_o",
                        stan::model::index_uni(s)),
                      stan::model::rvalue(X_o, "X_o",
                        stan::model::index_uni(t), stan::model::index_uni(i))))),
                "assigning variable log_B", stan::model::index_uni(s),
                stan::model::index_omni());
            }
            current_statement__ = 48;
            if (stan::math::logical_eq(
                  stan::model::rvalue(obs, "obs", stan::model::index_uni(t),
                    stan::model::index_uni(i)), 0)) {
              current_statement__ = 46;
              stan::model::assign(log_py, stan::math::rep_vector(0, S),
                "assigning variable log_py", stan::model::index_omni(),
                stan::model::index_uni(t));
            } else {
              current_statement__ = 44;
              stan::model::assign(log_py,
                stan::model::rvalue(log_B, "log_B",
                  stan::model::index_omni(),
                  stan::model::index_uni(
                    stan::model::rvalue(obs, "obs",
                      stan::model::index_uni(t), stan::model::index_uni(i)))),
                "assigning variable log_py", stan::model::index_omni(),
                stan::model::index_uni(t));
            }
          }
          current_statement__ = 51;
          stan::model::assign(ll, loglik(log_Pi, log_A, log_py, pstream__),
            "assigning variable ll", stan::model::index_uni(i));
        }
        current_statement__ = 54;
        log_lik_ = stan::math::sum(ll);
      }
      if (emit_transformed_parameters__) {
        out__.write(log_lik_);
        out__.write(prior_);
        for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
              out__.write(stan::model::rvalue(beta_s, "beta_s",
                            stan::model::index_uni(sym3__),
                            stan::model::index_uni(sym2__),
                            stan::model::index_uni(sym1__)));
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
              out__.write(stan::model::rvalue(beta_o, "beta_o",
                            stan::model::index_uni(sym3__),
                            stan::model::index_uni(sym2__),
                            stan::model::index_uni(sym1__)));
            }
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      prior = prior_;
      double log_lik = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      log_lik = log_lik_;
      out__.write(prior);
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> Pi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(Pi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(S),
        "assigning variable Pi");
      out__.write_free_simplex(Pi);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> beta_s_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_s_raw_2dim__,
            K_s, DUMMY_VAR__));
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= beta_s_raw_2dim__; ++sym2__) {
          current_statement__ = 2;
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            current_statement__ = 2;
            stan::model::assign(beta_s_raw, in__.read<local_scalar_t__>(),
              "assigning variable beta_s_raw",
              stan::model::index_uni(sym3__), stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write(beta_s_raw);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> beta_o_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_o_raw_2dim__,
            K_o, DUMMY_VAR__));
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= beta_o_raw_2dim__; ++sym2__) {
          current_statement__ = 3;
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            current_statement__ = 3;
            stan::model::assign(beta_o_raw, in__.read<local_scalar_t__>(),
              "assigning variable beta_o_raw",
              stan::model::index_uni(sym3__), stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write(beta_o_raw);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "Pi", "double",
        std::vector<size_t>{static_cast<size_t>(S)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta_s_raw",
        "double",
        std::vector<size_t>{static_cast<size_t>(S),
          static_cast<size_t>(beta_s_raw_2dim__), static_cast<size_t>(K_s)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "beta_o_raw",
        "double",
        std::vector<size_t>{static_cast<size_t>(S),
          static_cast<size_t>(beta_o_raw_2dim__), static_cast<size_t>(K_o)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> Pi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> Pi_flat__;
        current_statement__ = 1;
        Pi_flat__ = context__.vals_r("Pi");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(Pi, Pi_flat__[(pos__ - 1)],
            "assigning variable Pi", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(Pi);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> beta_s_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_s_raw_2dim__,
            K_s, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> beta_s_raw_flat__;
        current_statement__ = 2;
        beta_s_raw_flat__ = context__.vals_r("beta_s_raw");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= beta_s_raw_2dim__; ++sym2__) {
            current_statement__ = 2;
            for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
              current_statement__ = 2;
              stan::model::assign(beta_s_raw, beta_s_raw_flat__[(pos__ - 1)],
                "assigning variable beta_s_raw",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 2;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write(beta_s_raw);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> beta_o_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(S,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_o_raw_2dim__,
            K_o, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> beta_o_raw_flat__;
        current_statement__ = 3;
        beta_o_raw_flat__ = context__.vals_r("beta_o_raw");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= beta_o_raw_2dim__; ++sym2__) {
            current_statement__ = 3;
            for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
              current_statement__ = 3;
              stan::model::assign(beta_o_raw, beta_o_raw_flat__[(pos__ - 1)],
                "assigning variable beta_o_raw",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 3;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write(beta_o_raw);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"Pi", "beta_s_raw", "beta_o_raw"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"log_lik_", "prior_", "beta_s", "beta_o"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"prior", "log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(S)},
                std::vector<size_t>{static_cast<size_t>(S),
                  static_cast<size_t>(beta_s_raw_2dim__),
                  static_cast<size_t>(K_s)},
                std::vector<size_t>{static_cast<size_t>(S),
                  static_cast<size_t>(beta_o_raw_2dim__),
                  static_cast<size_t>(K_o)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(S),
               static_cast<size_t>(S), static_cast<size_t>(K_s)},
             std::vector<size_t>{static_cast<size_t>(S),
               static_cast<size_t>(M), static_cast<size_t>(K_o)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      param_names__.emplace_back(std::string() + "Pi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= beta_s_raw_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
          param_names__.emplace_back(std::string() + "beta_s_raw" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= beta_o_raw_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
          param_names__.emplace_back(std::string() + "beta_o_raw" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "log_lik_");
      param_names__.emplace_back(std::string() + "prior_");
      for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            param_names__.emplace_back(std::string() + "beta_s" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            param_names__.emplace_back(std::string() + "beta_o" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "prior");
      param_names__.emplace_back(std::string() + "log_lik");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= (S - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "Pi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= beta_s_raw_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
          param_names__.emplace_back(std::string() + "beta_s_raw" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= beta_o_raw_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
          param_names__.emplace_back(std::string() + "beta_o_raw" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "log_lik_");
      param_names__.emplace_back(std::string() + "prior_");
      for (int sym1__ = 1; sym1__ <= K_s; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            param_names__.emplace_back(std::string() + "beta_s" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= K_o; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= S; ++sym3__) {
            param_names__.emplace_back(std::string() + "beta_o" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "prior");
      param_names__.emplace_back(std::string() + "log_lik");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"Pi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"parameters\"},{\"name\":\"beta_s_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(beta_s_raw_2dim__) + ",\"cols\":" + std::to_string(K_s) + "}},\"block\":\"parameters\"},{\"name\":\"beta_o_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(beta_o_raw_2dim__) + ",\"cols\":" + std::to_string(K_o) + "}},\"block\":\"parameters\"},{\"name\":\"log_lik_\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"prior_\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"beta_s\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(S) + ",\"cols\":" + std::to_string(K_s) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_o\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(K_o) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"Pi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((S -1)) + "},\"block\":\"parameters\"},{\"name\":\"beta_s_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(beta_s_raw_2dim__) + ",\"cols\":" + std::to_string(K_s) + "}},\"block\":\"parameters\"},{\"name\":\"beta_o_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(beta_o_raw_2dim__) + ",\"cols\":" + std::to_string(K_o) + "}},\"block\":\"parameters\"},{\"name\":\"log_lik_\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"prior_\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"beta_s\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(S) + ",\"cols\":" + std::to_string(K_s) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_o\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(K_o) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((S + ((S * beta_s_raw_2dim__) * K_s)) + ((S
      * beta_o_raw_2dim__) * K_o));
    const size_t num_transformed = emit_transformed_parameters * ((((1 + 1) +
      ((S * S) * K_s)) + ((S * M) * K_o)));
    const size_t num_gen_quantities = emit_generated_quantities * ((1 + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((S + ((S * beta_s_raw_2dim__) * K_s)) + ((S
      * beta_o_raw_2dim__) * K_o));
    const size_t num_transformed = emit_transformed_parameters * ((((1 + 1) +
      ((S * S) * K_s)) + ((S * M) * K_o)));
    const size_t num_gen_quantities = emit_generated_quantities * ((1 + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_nhmm_cvv_namespace::model_nhmm_cvv;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_nhmm_cvv_namespace::profiles__;
}
#endif
#endif
